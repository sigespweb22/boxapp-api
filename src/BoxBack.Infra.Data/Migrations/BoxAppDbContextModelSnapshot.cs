// <auto-generated />
using System;
using BoxBack.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoxBack.Infra.Data.Migrations
{
    [DbContext(typeof(BoxAppDbContext))]
    partial class BoxAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 11, 24, 13, 57, 32, 636, DateTimeKind.Unspecified).AddTicks(6871), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            IsDeleted = false,
                            Name = "Master",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UniqueKey = "ors0eAr4DPkvrwhy5gVnQAqRDnJUO43j9HzbkPyZ/7Q=",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 11, 24, 13, 57, 32, 636, DateTimeKind.Unspecified).AddTicks(6883), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            ConcurrencyStamp = "4629cea3-3b65-43b9-9c4e-7cc68fe4e4e4",
                            Description = "Pode realizar todas as ações/operações, bem como ter acesso a todos os dados e funcionalidades",
                            Name = "Master",
                            NormalizedName = "MASTER"
                        },
                        new
                        {
                            Id = "643e3614-0ef5-4451-8801-91f464fe1272",
                            ConcurrencyStamp = "0c981122-7e07-46a0-b080-fd47eb9e32aa",
                            Description = "Pode realizar todas as ações/operações em todas as dashboards",
                            Name = "CanDashboardAll",
                            NormalizedName = "CANDASHBOARDALL"
                        },
                        new
                        {
                            Id = "9eba96dd-159d-4d8a-b2a9-c24006b5f842",
                            ConcurrencyStamp = "d192d436-a78d-4b19-b678-4ee0a194f47e",
                            Description = "Pode visualizar todas as dashboards do cliente",
                            Name = "CanDashboardClienteAll",
                            NormalizedName = "CANDASHBOARDCLIENTEALL"
                        },
                        new
                        {
                            Id = "3a49b5a5-13ea-4790-831e-6c1ce83db07d",
                            ConcurrencyStamp = "29a423e7-957b-4235-be1d-b9e479e39c8d",
                            Description = "Pode visualizar todas as dashboards de controle de acesso",
                            Name = "CanDashboardControleAcessoAll",
                            NormalizedName = "CANDASHBOARDCONTROLEACESSOALL"
                        },
                        new
                        {
                            Id = "7cbe40b6-22b7-443b-a688-dd80740e7023",
                            ConcurrencyStamp = "a6cfb3c2-e860-4b2b-b43a-49be0120c4ef",
                            Description = "Pode realizar todas as ações/operações em todos os usuários",
                            Name = "CanUserAll",
                            NormalizedName = "CANUSERALL"
                        },
                        new
                        {
                            Id = "7c016bad-5846-494e-b4e9-320ec1344e39",
                            ConcurrencyStamp = "397d217c-9084-4130-8d73-7b311c4637d4",
                            Description = "Pode listar os dados de todos os usuários",
                            Name = "CanUserList",
                            NormalizedName = "CANUSERLIST"
                        },
                        new
                        {
                            Id = "515b76f7-92f3-45cc-b059-b48a529a7292",
                            ConcurrencyStamp = "f153c736-c6f4-4293-9b15-7f592b3bd321",
                            Description = "Pode listar os dados de um usuários",
                            Name = "CanUserRead",
                            NormalizedName = "CANUSERREAD"
                        },
                        new
                        {
                            Id = "a7edde61-195f-48e9-9117-92785187afd0",
                            ConcurrencyStamp = "904d58a5-4afb-4967-beed-2d3e0948501d",
                            Description = "Pode criar um usuário",
                            Name = "CanUserCreate",
                            NormalizedName = "CANUSERCREATE"
                        },
                        new
                        {
                            Id = "e9abf9bb-9671-4472-9952-1922a119917d",
                            ConcurrencyStamp = "ecac7d2a-f299-4643-bb0d-702c1bfc4b65",
                            Description = "Pode atualizar os dados de um usuário",
                            Name = "CanUserUpdate",
                            NormalizedName = "CANUSERUPDATE"
                        },
                        new
                        {
                            Id = "ec3be404-24ec-4f21-a958-98029984ad0b",
                            ConcurrencyStamp = "1d764563-32d6-46a2-8f48-ab2f88352a03",
                            Description = "Pode deletar um usuário",
                            Name = "CanUserDelete",
                            NormalizedName = "CANUSERDELETE"
                        },
                        new
                        {
                            Id = "87ff7f3c-006c-4017-b1f7-30ca387adf35",
                            ConcurrencyStamp = "d7fbbb3e-f676-4600-bbb5-e1c2ec7d7b61",
                            Description = "Pode realizar todas as ações/operações em todos as roles/permissões",
                            Name = "CanRoleAll",
                            NormalizedName = "CANROLEALL"
                        },
                        new
                        {
                            Id = "deabeccb-6cd7-49c2-9619-5c95ee85e883",
                            ConcurrencyStamp = "8a7fb320-925d-46b3-a010-a912455c250f",
                            Description = "Pode listar os dados de todas as roles/permissões",
                            Name = "CanRoleList",
                            NormalizedName = "CANROLELIST"
                        },
                        new
                        {
                            Id = "416aaa62-095c-45c8-bfc5-9fc1dee93b60",
                            ConcurrencyStamp = "ad3162c8-7b52-4c2a-8800-997124f27495",
                            Description = "Pode listar os dados de uma roles/permissão",
                            Name = "CanRoleRead",
                            NormalizedName = "CANROLEREAD"
                        },
                        new
                        {
                            Id = "e2addce4-c57c-47d4-9152-3896ce7cfdd0",
                            ConcurrencyStamp = "091e227b-7753-4e67-8e19-9659136bab38",
                            Description = "Pode criar uma role/permissão",
                            Name = "CanRoleCreate",
                            NormalizedName = "CANROLECREATE"
                        },
                        new
                        {
                            Id = "2b2391f4-9260-4695-a20f-e46a62ecee5c",
                            ConcurrencyStamp = "0b19576f-4f8f-451a-adc4-3593889761b8",
                            Description = "Pode atualizar os dados de uma roles/permissão",
                            Name = "CanRoleUpdate",
                            NormalizedName = "CANROLEUPDATE"
                        },
                        new
                        {
                            Id = "496fa21f-7ced-4229-9244-57342d8998b1",
                            ConcurrencyStamp = "066b2a82-076b-477c-b7e5-7778098d96ff",
                            Description = "Pode deletar uma role/permissão",
                            Name = "CanRoleDelete",
                            NormalizedName = "CANROLEDELETE"
                        },
                        new
                        {
                            Id = "60158ce6-980a-416d-a336-5e1b8ceadfc7",
                            ConcurrencyStamp = "089fd849-d759-4191-a62b-01ad4f1bbff8",
                            Description = "Pode realizar todas as ações/operações em todos os grupos",
                            Name = "CanGroupAll",
                            NormalizedName = "CANGROUPALL"
                        },
                        new
                        {
                            Id = "e49f1b2e-ed22-407b-bd34-1326bf62a521",
                            ConcurrencyStamp = "f3d5c98b-916a-4f33-8e0e-a7a540b99792",
                            Description = "Pode listar os dados de todos os grupos",
                            Name = "CanGroupList",
                            NormalizedName = "CANGROUPLIST"
                        },
                        new
                        {
                            Id = "59b6fc1b-e382-446d-880c-d5f3a7f337fb",
                            ConcurrencyStamp = "4742d917-e3a4-450f-998f-e015463987fc",
                            Description = "Pode listar os dado de um grupo",
                            Name = "CanGroupRead",
                            NormalizedName = "CANGROUPREAD"
                        },
                        new
                        {
                            Id = "d9a939be-109b-4149-8380-795178c69eb9",
                            ConcurrencyStamp = "cde6d7e1-5884-424c-b60e-75507110c102",
                            Description = "Pode criar um grupo",
                            Name = "CanGroupCreate",
                            NormalizedName = "CANGROUPCREATE"
                        },
                        new
                        {
                            Id = "a32058fb-1853-41cf-a1c7-dd5c0e626203",
                            ConcurrencyStamp = "c95b896c-393a-4c12-933c-b78919061f78",
                            Description = "Pode atualizar os dados de um grupo",
                            Name = "CanGroupUpdate",
                            NormalizedName = "CANGROUPUPDATE"
                        },
                        new
                        {
                            Id = "2d1cd767-9312-477d-b7fe-68a9dc36e222",
                            ConcurrencyStamp = "e2bcc2cd-149e-438f-b8c8-a3d691707033",
                            Description = "Pode deletar um grupo",
                            Name = "CanGroupDelete",
                            NormalizedName = "CANGROUPDELETE"
                        },
                        new
                        {
                            Id = "80531f9e-de64-4403-b8e2-3705d4fd8598",
                            ConcurrencyStamp = "43fe6588-fef3-4713-b480-02e41b0d56af",
                            Description = "Pode visualizar todos os indicadores da dashboard comercial",
                            Name = "CanClienteAll",
                            NormalizedName = "CANCLIENTEALL"
                        },
                        new
                        {
                            Id = "bb609522-17b4-4922-8f00-28fdfd37d5da",
                            ConcurrencyStamp = "680caef9-a539-4d1e-9df6-508a5a3a0804",
                            Description = "Pode listar os dados de todos os clientes",
                            Name = "CanClienteList",
                            NormalizedName = "CANCLIENTELIST"
                        },
                        new
                        {
                            Id = "e40e29c1-4990-41c7-8f34-bff0e0e7aef9",
                            ConcurrencyStamp = "21f92534-0b81-49c3-8865-5f515b2e336d",
                            Description = "Pode listar os dado de um cliente",
                            Name = "CanClienteRead",
                            NormalizedName = "CANCLIENTEREAD"
                        },
                        new
                        {
                            Id = "d5bfbf1e-895b-4816-b41e-20fe8a580e9e",
                            ConcurrencyStamp = "fcf55b4f-36b0-4875-a128-dd36e7b2444a",
                            Description = "Pode criar um cliente",
                            Name = "CanClienteCreate",
                            NormalizedName = "CANCLIENTECREATE"
                        },
                        new
                        {
                            Id = "b33d176a-76d5-49d3-85c4-9194c75bb31e",
                            ConcurrencyStamp = "722d38a6-9e5f-41b5-834e-dffe21acc4bb",
                            Description = "Pode atualizar os dados de um cliente",
                            Name = "CanClienteUpdate",
                            NormalizedName = "CANCLIENTEUPDATE"
                        },
                        new
                        {
                            Id = "1c0c84eb-ba26-4889-a50b-9f86685b3332",
                            ConcurrencyStamp = "988907bb-c69a-4e0c-88f3-5ede6939e993",
                            Description = "Pode deletar um cliente",
                            Name = "CanClienteDelete",
                            NormalizedName = "CANCLIENTEDELETE"
                        },
                        new
                        {
                            Id = "55e0b4a6-77b9-4fb0-8033-bc649228fa3f",
                            ConcurrencyStamp = "87f356b2-03ea-4560-915e-2e97ceafa5cb",
                            Description = "Pode realizar todas as ações/operações em todos os Third party CNPJ - Api de terceiro para busca de CNPJ",
                            Name = "CanCnpjTPAll",
                            NormalizedName = "CANCNPJTPALL"
                        },
                        new
                        {
                            Id = "65b369eb-c6c8-4296-8d5c-f7edd99be13a",
                            ConcurrencyStamp = "08261521-eaa1-44c7-88b0-de62ef907606",
                            Description = "Pode listar os dados de um Third party CNPJ - Api de terceiro para busca de CNPJ",
                            Name = "CanCnpjTPRead",
                            NormalizedName = "CANCNPJTPREAD"
                        },
                        new
                        {
                            Id = "bc4db068-6e3d-43e8-9df0-f9cffc2b9322",
                            ConcurrencyStamp = "5929b1d6-4321-407e-b66b-b25d0f2634ac",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de clientes",
                            Name = "CanClienteServicoAll",
                            NormalizedName = "CANCLIENTESERVICOALL"
                        },
                        new
                        {
                            Id = "e00df4f3-edb2-42cb-ab9c-8ea91a1529d6",
                            ConcurrencyStamp = "a15f7466-f8df-4e5c-9eb2-0b6a9c42f746",
                            Description = "Pode listar os dados de todos os serviços de clientes",
                            Name = "CanClienteServicoList",
                            NormalizedName = "CANCLIENTESERVICOLIST"
                        },
                        new
                        {
                            Id = "79287a49-6dac-4a75-89b1-673d2c6d7005",
                            ConcurrencyStamp = "fd096556-ee85-401d-a623-a6e060d125e8",
                            Description = "Pode listar os dado de um serviço de cliente",
                            Name = "CanClienteServicoRead",
                            NormalizedName = "CANCLIENTESERVICOREAD"
                        },
                        new
                        {
                            Id = "5a19baa2-620e-4f63-9e11-c675c9080146",
                            ConcurrencyStamp = "2e739b5d-9fe6-4ac9-807e-5f656693c13a",
                            Description = "Pode criar um serviço para um cliente",
                            Name = "CanClienteServicoCreate",
                            NormalizedName = "CANCLIENTESERVICOCREATE"
                        },
                        new
                        {
                            Id = "30b50456-25d8-4dfa-903d-2c04f7b979e8",
                            ConcurrencyStamp = "9922110e-e85e-4e51-bcef-baec2e426d62",
                            Description = "Pode atualizar um serviço de um cliente",
                            Name = "CanClienteServicoUpdate",
                            NormalizedName = "CANCLIENTESERVICOUPDATE"
                        },
                        new
                        {
                            Id = "c1310ac0-0c10-4717-b73c-cdf584cbdce5",
                            ConcurrencyStamp = "41cce591-699c-41a5-9b52-55a4f02b1152",
                            Description = "Pode deletar um serviço de um cliente",
                            Name = "CanClienteServicoDelete",
                            NormalizedName = "CANCLIENTESERVICODELETE"
                        },
                        new
                        {
                            Id = "f9f61ba9-a9d0-45d9-811a-67d19e6b7f8f",
                            ConcurrencyStamp = "248a94f8-9aa1-4a6f-8e02-17712faeec1f",
                            Description = "Pode realizar todas as ações/operações em todos os serviços",
                            Name = "CanServicoAll",
                            NormalizedName = "CANSERVICOALL"
                        },
                        new
                        {
                            Id = "48dd7c07-1008-4c06-b889-a4db82ec13f2",
                            ConcurrencyStamp = "2e8b97ed-9972-439b-8736-67e65563ba1d",
                            Description = "Pode listar os dados de todos os serviços",
                            Name = "CanServicoList",
                            NormalizedName = "CANSERVICOLIST"
                        },
                        new
                        {
                            Id = "cd90081b-e638-4baa-9714-b9172014a0e3",
                            ConcurrencyStamp = "d08e81a9-3467-4456-a6a2-7b4bbba6db78",
                            Description = "Pode listar os dados de um serviço",
                            Name = "CanServicoRead",
                            NormalizedName = "CANSERVICOREAD"
                        },
                        new
                        {
                            Id = "25b862e2-7932-4a22-a053-a844343a06e1",
                            ConcurrencyStamp = "4b3cf454-d035-4929-a926-67fa76e7576d",
                            Description = "Pode atualizar um serviço",
                            Name = "CanServicoUpdate",
                            NormalizedName = "CANSERVICOUPDATE"
                        },
                        new
                        {
                            Id = "e204d81d-6f52-456d-9abf-fedb9de0885f",
                            ConcurrencyStamp = "77d77570-d195-485d-802c-8d97037794d4",
                            Description = "Pode criar um serviço",
                            Name = "CanServicoCreate",
                            NormalizedName = "CANSERVICOCREATE"
                        },
                        new
                        {
                            Id = "9b49b4b0-9fdd-407a-9345-af06f8634824",
                            ConcurrencyStamp = "f2795a97-7da5-400a-a590-9289f6ca3508",
                            Description = "Pode deletar um serviço",
                            Name = "CanServicoDelete",
                            NormalizedName = "CANSERVICODELETE"
                        },
                        new
                        {
                            Id = "d865834e-ffe1-4a69-b78e-2fb7bba94925",
                            ConcurrencyStamp = "9deccbf0-39db-4877-af7d-56cf578769fe",
                            Description = "Pode realizar todas as ações/operações em todos os pipelines",
                            Name = "CanPipelineAll",
                            NormalizedName = "CANPIPELINEALL"
                        },
                        new
                        {
                            Id = "c5540589-98fd-463a-870d-b57fc81ff594",
                            ConcurrencyStamp = "ddd0bf27-9127-42e0-936e-8f785fe871f9",
                            Description = "Pode listar os dados de todos os pipelines",
                            Name = "CanPipelineList",
                            NormalizedName = "CANPIPELINELIST"
                        },
                        new
                        {
                            Id = "94dbb8db-4e8d-4878-9d60-c55700f4b80b",
                            ConcurrencyStamp = "283ee139-5d35-4d22-9297-c4e8810d261f",
                            Description = "Pode listar os dados de um pipeline",
                            Name = "CanPipelineRead",
                            NormalizedName = "CANPIPELINEREAD"
                        },
                        new
                        {
                            Id = "e3743e47-29e2-4e1f-8e2a-63b0dbc9e65a",
                            ConcurrencyStamp = "cf2f6f2a-98d6-4dd7-9aab-fd5d960d98d8",
                            Description = "Pode criar um pipeline",
                            Name = "CanPipelineCreate",
                            NormalizedName = "CANPIPELINECREATE"
                        },
                        new
                        {
                            Id = "ab298b2f-50cb-48a1-918a-bef3e23b2d17",
                            ConcurrencyStamp = "ed058db2-5eec-4a32-939c-8e5ad6f716f7",
                            Description = "Pode atualizar um pipeline",
                            Name = "CanPipelineUpdate",
                            NormalizedName = "CANPIPELINEUPDATE"
                        },
                        new
                        {
                            Id = "cc422671-d8e9-4ed4-a30c-f623c021cee9",
                            ConcurrencyStamp = "28dbcc85-accf-4bc1-9a86-718180548072",
                            Description = "Pode deletar um pipeline",
                            Name = "CanPipelineDelete",
                            NormalizedName = "CANPIPELINEDELETE"
                        },
                        new
                        {
                            Id = "0c105d70-4e82-4aa1-92cf-bec5dcd32acc",
                            ConcurrencyStamp = "8ec31a3f-ddad-43fb-9655-f93f3e40851a",
                            Description = "Pode realizar todas as ações/operações em todos os fornecedores",
                            Name = "CanFornecedorAll",
                            NormalizedName = "CANFORNECEDORALL"
                        },
                        new
                        {
                            Id = "9650347c-5daf-4200-9eef-ac53cdf1e396",
                            ConcurrencyStamp = "67459e22-b52c-43f7-9d4e-0e212d5d42c0",
                            Description = "Pode listar os dados de todos os fornecedores",
                            Name = "CanFornecedorList",
                            NormalizedName = "CANFORNECEDORLIST"
                        },
                        new
                        {
                            Id = "613831ea-8ed2-417c-871f-21117b4775a1",
                            ConcurrencyStamp = "96b232f4-a79b-4e8d-9b82-a03deafbf626",
                            Description = "Pode listar os dados de um fornecedor",
                            Name = "CanFornecedorRead",
                            NormalizedName = "CANFORNECEDORREAD"
                        },
                        new
                        {
                            Id = "308d950a-17fc-4cce-b32d-d09e5f4abdfe",
                            ConcurrencyStamp = "5e16f2ff-e730-40d5-8109-9ac066c3c711",
                            Description = "Pode criar um fornecedor",
                            Name = "CanFornecedorCreate",
                            NormalizedName = "CANFORNECEDORCREATE"
                        },
                        new
                        {
                            Id = "6397523e-ae5a-4b37-bd3e-25890a03f26a",
                            ConcurrencyStamp = "e2a7c8cb-27da-4a16-a47f-46e290b4aed5",
                            Description = "Pode atualizar um fornecedor",
                            Name = "CanFornecedorUpdate",
                            NormalizedName = "CANFORNECEDORUPDATE"
                        },
                        new
                        {
                            Id = "b9c676d2-d6b9-4691-a886-152e8c96b1c1",
                            ConcurrencyStamp = "18dfd658-e7e5-416a-9dbc-0f773c52966d",
                            Description = "Pode deletar um fornecedor",
                            Name = "CanForncedorDelete",
                            NormalizedName = "CANFORNCEDORDELETE"
                        },
                        new
                        {
                            Id = "2c7d1dea-7ec9-45f9-aec9-14b4d61d9b82",
                            ConcurrencyStamp = "2afbf5d8-5003-43c0-8e77-bbe1437b61bc",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de fornecedores",
                            Name = "CanFornecedorServicoAll",
                            NormalizedName = "CANFORNECEDORSERVICOALL"
                        },
                        new
                        {
                            Id = "3a1ed912-63c3-4843-b4f4-9337969ce755",
                            ConcurrencyStamp = "f55aee08-dae9-441c-a428-407e4ac675cd",
                            Description = "Pode listar os dados de todos os serviços de fornecedores",
                            Name = "CanFornecedorServicoList",
                            NormalizedName = "CANFORNECEDORSERVICOLIST"
                        },
                        new
                        {
                            Id = "c55fcc6a-8df7-4353-9612-8f96ad1617f6",
                            ConcurrencyStamp = "c4d89567-2d50-4b9c-9655-8b3a7a5646fd",
                            Description = "Pode listar os dado de um serviço de fornecedor",
                            Name = "CanFornecedorServicoRead",
                            NormalizedName = "CANFORNECEDORSERVICOREAD"
                        },
                        new
                        {
                            Id = "44b7d39b-30bd-418a-b005-1543fef809ea",
                            ConcurrencyStamp = "77a7b013-91ae-49f9-9e62-5506cc008827",
                            Description = "Pode criar um serviço para um fornecedor",
                            Name = "CanFornecedorServicoCreate",
                            NormalizedName = "CANFORNECEDORSERVICOCREATE"
                        },
                        new
                        {
                            Id = "4293ebce-411e-49c3-bdc2-a7cbe5062c56",
                            ConcurrencyStamp = "7cce44c3-3ee9-42ce-bf8b-d098d62e01d9",
                            Description = "Pode atualizar um serviço de um fornecedor",
                            Name = "CanFornecedorServicoUpdate",
                            NormalizedName = "CANFORNECEDORSERVICOUPDATE"
                        },
                        new
                        {
                            Id = "c642cda4-b93d-41c6-8375-1f6b95383d7d",
                            ConcurrencyStamp = "1577073d-8788-43d5-bc98-69e7eb5810b7",
                            Description = "Pode deletar um serviço de um fornecedor",
                            Name = "CanFornecedorServicoDelete",
                            NormalizedName = "CANFORNECEDORSERVICODELETE"
                        },
                        new
                        {
                            Id = "a951dcb6-fc28-45cc-a237-5956700fe482",
                            ConcurrencyStamp = "419e85c1-af4d-4ed9-85c9-de421fe3f5d0",
                            Description = "Pode realizar todas as ações/operações em todos os produtos",
                            Name = "CanProdutoAll",
                            NormalizedName = "CANPRODUTOALL"
                        },
                        new
                        {
                            Id = "09e28263-e185-47fa-b83d-4b05cb3fb45a",
                            ConcurrencyStamp = "048cb4b5-d084-4e76-93d6-a79ec81ca643",
                            Description = "Pode listar os dados de todos os produtos",
                            Name = "CanProdutoList",
                            NormalizedName = "CANPRODUTOLIST"
                        },
                        new
                        {
                            Id = "defc2392-5a3a-46dd-86d0-65245cff0b04",
                            ConcurrencyStamp = "60a3ffae-d51b-4d79-b334-2899d8d0344b",
                            Description = "Pode listar os dados de um produtos",
                            Name = "CanProdutoRead",
                            NormalizedName = "CANPRODUTOREAD"
                        },
                        new
                        {
                            Id = "75ea0fc8-b95a-4a75-81f1-f862ce52ce38",
                            ConcurrencyStamp = "8be7ea2b-ed96-4dcc-b01c-03969e5be8b8",
                            Description = "Pode criar um produtos",
                            Name = "CanProdutoCreate",
                            NormalizedName = "CANPRODUTOCREATE"
                        },
                        new
                        {
                            Id = "81214004-1018-46c1-af78-f6babeb1916a",
                            ConcurrencyStamp = "cb46dd41-5107-4966-a350-c8b7c28341dd",
                            Description = "Pode atualizar um produtos",
                            Name = "CanProdutoUpdate",
                            NormalizedName = "CANPRODUTOUPDATE"
                        },
                        new
                        {
                            Id = "e970593c-15ab-40e7-8a8e-8bb842863292",
                            ConcurrencyStamp = "a6150d38-3c71-4381-a150-b164603a8754",
                            Description = "Pode deletar um produtos",
                            Name = "CanProdutoDelete",
                            NormalizedName = "CANPRODUTODELETE"
                        },
                        new
                        {
                            Id = "956f4ee7-5a5c-4a07-8cb1-57c57ee32289",
                            ConcurrencyStamp = "23686204-a9bb-44be-9da9-7a2ca65bd93d",
                            Description = "Pode realizar todas as ações/operações em todos os contratos de clientes",
                            Name = "CanClienteContratoAll",
                            NormalizedName = "CANCLIENTECONTRATOALL"
                        },
                        new
                        {
                            Id = "a442bd1a-427c-40f9-af83-0f48c5285612",
                            ConcurrencyStamp = "058c9d38-fcc3-4d67-8a19-fdce769e2d26",
                            Description = "Pode listar os dados de todos os contratos de clientes",
                            Name = "CanClienteContratoList",
                            NormalizedName = "CANCLIENTECONTRATOLIST"
                        },
                        new
                        {
                            Id = "7bd7ed6a-e790-4205-a0d6-ff8dafaa0084",
                            ConcurrencyStamp = "ce32e6db-5496-44c6-93a4-df7e6c1184f2",
                            Description = "Pode listar os dados de um contrato de cliente",
                            Name = "CanClienteContratoRead",
                            NormalizedName = "CANCLIENTECONTRATOREAD"
                        },
                        new
                        {
                            Id = "99d46575-a4f2-40d9-8786-bd4126d16e52",
                            ConcurrencyStamp = "51be73eb-aa92-42cd-8751-91d1212f0a87",
                            Description = "Pode criar um contrato de cliente",
                            Name = "CanClienteContratoCreate",
                            NormalizedName = "CANCLIENTECONTRATOCREATE"
                        },
                        new
                        {
                            Id = "8d4f99ad-1217-4834-afc4-527ab20ccf9f",
                            ConcurrencyStamp = "2eb3fb7a-b1f3-47b3-865c-9ab0ece06e7e",
                            Description = "Pode atualizar um contrato de cliente",
                            Name = "CanClienteContratoUpdate",
                            NormalizedName = "CANCLIENTECONTRATOUPDATE"
                        },
                        new
                        {
                            Id = "f69f50db-93c7-4c52-8058-40a9e213cf64",
                            ConcurrencyStamp = "c33d16f0-397c-42d5-8bd2-eb5d9c38b8d3",
                            Description = "Pode deletar um contrato de cliente",
                            Name = "CanClienteContratoDelete",
                            NormalizedName = "CANCLIENTECONTRATODELETE"
                        },
                        new
                        {
                            Id = "29a9f7b5-2dd9-4f4d-8c3a-68545c86f28b",
                            ConcurrencyStamp = "f5bb5482-87fe-4de0-a6f7-6def455d1b52",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de clientes",
                            Name = "CanClienteProdutoAll",
                            NormalizedName = "CANCLIENTEPRODUTOALL"
                        },
                        new
                        {
                            Id = "89dc2a29-e5f0-4fde-a6ae-314170bc380a",
                            ConcurrencyStamp = "6edc97fe-1a29-4593-abfc-c4e38ee3eeaf",
                            Description = "Pode listar os dados de todos os produtos de clientes",
                            Name = "CanClienteProdutoList",
                            NormalizedName = "CANCLIENTEPRODUTOLIST"
                        },
                        new
                        {
                            Id = "07a7dd7a-722e-4059-ac62-16731209c7ee",
                            ConcurrencyStamp = "389b982d-21cf-4bfd-b666-a4e0c97edc2f",
                            Description = "Pode listar os dados de um produto de cliente",
                            Name = "CanClienteProdutoRead",
                            NormalizedName = "CANCLIENTEPRODUTOREAD"
                        },
                        new
                        {
                            Id = "d0fd653a-bbf2-4493-9651-9258ec9499c9",
                            ConcurrencyStamp = "ee7f5409-cd11-4eb2-8146-672b31ba98d6",
                            Description = "Pode criar um produto de cliente",
                            Name = "CanClienteProdutoCreate",
                            NormalizedName = "CANCLIENTEPRODUTOCREATE"
                        },
                        new
                        {
                            Id = "c6f41372-c86e-4a78-b0c7-303a1adddb4c",
                            ConcurrencyStamp = "f2ba1a3a-a9ac-4d9d-8019-fc38ad866829",
                            Description = "Pode atualizar um produto de cliente",
                            Name = "CanClienteProdutoUpdate",
                            NormalizedName = "CANCLIENTEPRODUTOUPDATE"
                        },
                        new
                        {
                            Id = "d9f25999-ea39-48c2-8a5d-9d6c6194bb7f",
                            ConcurrencyStamp = "17478b11-a7d0-4bf3-b074-59c9e2b1e4d2",
                            Description = "Pode deletar um produto de cliente",
                            Name = "CanClienteProdutoDelete",
                            NormalizedName = "CANCLIENTEPRODUTODELETE"
                        },
                        new
                        {
                            Id = "24d5ced9-9f25-471e-a173-681e9ca9868a",
                            ConcurrencyStamp = "e00c23f0-b715-4c80-aa7c-ba8a031ebd90",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de fornecedores",
                            Name = "CanFornecedorProdutoAll",
                            NormalizedName = "CANFORNECEDORPRODUTOALL"
                        },
                        new
                        {
                            Id = "19b91715-be23-4be7-a9e9-b3bd30ff2755",
                            ConcurrencyStamp = "997ab06d-2e09-4419-b4d5-91d3d0e09e90",
                            Description = "Pode listar os dados de todos os produtos de fornecedores",
                            Name = "CanFornecedorProdutoList",
                            NormalizedName = "CANFORNECEDORPRODUTOLIST"
                        },
                        new
                        {
                            Id = "1ff0490f-6abf-474f-b6e9-ea86a0dd115a",
                            ConcurrencyStamp = "2425f335-de54-41ae-9783-ee6b25aeef1b",
                            Description = "Pode listar os dados de um produto de fornecedor",
                            Name = "CanFornecedorProdutoRead",
                            NormalizedName = "CANFORNECEDORPRODUTOREAD"
                        },
                        new
                        {
                            Id = "a86b0aec-e529-4e0c-8faf-8c4e299a4a38",
                            ConcurrencyStamp = "5e426178-27ff-4063-9982-49dbf47c18e8",
                            Description = "Pode visualizar um produto de fornecedor",
                            Name = "CanFornecedorProdutoCreate",
                            NormalizedName = "CANFORNECEDORPRODUTOCREATE"
                        },
                        new
                        {
                            Id = "570bcbe4-6e11-4484-a297-22ed4cc89c83",
                            ConcurrencyStamp = "1e2e2073-ae64-4c7b-9329-c3aa84570494",
                            Description = "Pode criar um produto de fornecedor",
                            Name = "CanFornecedorProdutoUpdate",
                            NormalizedName = "CANFORNECEDORPRODUTOUPDATE"
                        },
                        new
                        {
                            Id = "5eb213f9-c93d-4495-844d-94b658555a28",
                            ConcurrencyStamp = "fd6bc43e-0e5c-41c0-8eb2-85c49bf66cd3",
                            Description = "Pode deletar um produto de fornecedor",
                            Name = "CanFornecedorProdutoDelete",
                            NormalizedName = "CANFORNECEDORPRODUTODELETE"
                        },
                        new
                        {
                            Id = "f83b9674-c13b-49d1-9445-bfc0b914a399",
                            ConcurrencyStamp = "3473474a-95bc-4237-8b29-24389d4d5378",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de fornecedores",
                            Name = "CanDashboardComercialAll",
                            NormalizedName = "CANDASHBOARDCOMERCIALALL"
                        },
                        new
                        {
                            Id = "bc4521be-8f8f-4200-a1fb-10c393ef796f",
                            ConcurrencyStamp = "2f0f108b-ba89-4b31-ad39-6b0ea29416ff",
                            Description = "Pode listar o indicador de clientes ativos com contratos",
                            Name = "CanDashboardComercialClienteContratoList",
                            NormalizedName = "CANDASHBOARDCOMERCIALCLIENTECONTRATOLIST"
                        },
                        new
                        {
                            Id = "fd92ec3a-45f7-475f-92ec-98f79a8ec922",
                            ConcurrencyStamp = "bd42bc3c-fa58-4755-bdd7-a59bf63bd5e5",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroAll",
                            NormalizedName = "CANCHAVEAPITERCEIROALL"
                        },
                        new
                        {
                            Id = "b7f76ec4-542b-4343-ab83-aa0ab1c090a3",
                            ConcurrencyStamp = "532cea27-643e-4292-8bd8-ff450bd3b1a9",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroList",
                            NormalizedName = "CANCHAVEAPITERCEIROLIST"
                        },
                        new
                        {
                            Id = "2521b170-1ef1-4f58-964c-2b8fb65ca577",
                            ConcurrencyStamp = "1949c489-3b65-4a89-b30f-edcb17452ce7",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroRead",
                            NormalizedName = "CANCHAVEAPITERCEIROREAD"
                        },
                        new
                        {
                            Id = "21eb51dd-b593-4f60-b9ac-57548f7e4cea",
                            ConcurrencyStamp = "9ba9e996-067d-4e40-9551-2c87cae41e71",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroCreate",
                            NormalizedName = "CANCHAVEAPITERCEIROCREATE"
                        },
                        new
                        {
                            Id = "fcd349f5-5d00-4adb-bc20-c2f0919f2aed",
                            ConcurrencyStamp = "3f6f63f2-f952-421b-9128-af9f211d5fbd",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroUpdate",
                            NormalizedName = "CANCHAVEAPITERCEIROUPDATE"
                        },
                        new
                        {
                            Id = "085319ac-0299-4e5c-b88e-4e955dcbac70",
                            ConcurrencyStamp = "1c16f718-960f-4a8d-abdb-ed9910aa53a2",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroDelete",
                            NormalizedName = "CANCHAVEAPITERCEIRODELETE"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetRoleGroups", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataAniversario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Funcao")
                        .HasColumnType("integer");

                    b.Property<int>("Genero")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TelefoneCelular")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasDefaultValue(99999999999L);

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "ca431822-360a-4ee6-b978-66564d429fc7",
                            DataAniversario = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alan.rezende@boxtecnologia.com.br",
                            EmailConfirmed = true,
                            FullName = "ALAN LEITE DE REZENDE",
                            Funcao = 0,
                            Genero = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAN.REZENDE@BOXTECNOLOGIA.COM.BR",
                            NormalizedUserName = "ALAN.REZENDE@BOXTECNOLOGIA.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGbgHKOKiDDs5fvXN8kHviorntHToMKurnVJNmsFQNInxhQOyZTwJ2w0SpbyCdZbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9514850-61dd-4cc1-b909-88b79b035643",
                            Setor = 0,
                            Status = 0,
                            TelefoneCelular = 0L,
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            TwoFactorEnabled = false,
                            UserName = "alan.rezende@boxtecnologia.com.br"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetUserGroups", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "b3a5b61d-7ff4-43cb-bad4-a945b150fc72"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ChaveApiTerceiro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("ApiTerceiro")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataValidade")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChavesApiTerceiro", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b08f9ab0-3546-49ca-8e1d-6b628cea7943"),
                            ApiTerceiro = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataValidade = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Cep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("20");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("50");

                    b.Property<string>("Cpf")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DataFundacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("5");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("500");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int?>("TipoPessoa")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<long?>("BomControleContratoId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Periodicidade")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorContrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,5)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClienteContratos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ClienteProdutos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<int>("CobrancaTipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ServicoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ServicoId");

                    b.ToTable("ClienteServicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Fornecedores", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<string>("CodigoProduto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorProdutos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<string>("CodigoServico")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorServicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("Pipelines", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineAssinante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.HasIndex("UserId");

                    b.ToTable("PipelineAssinantes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AlertaEstagnacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineEtapas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataConclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineEtapaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineEtapaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaAnexos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Titulo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaApontamentos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamentoAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaApontamentoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaApontamentoId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaApontamentoAnexos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAssinante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("UserId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaAssinantes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaTag", b =>
                {
                    b.Property<Guid>("TarefaTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("TarefaTagId", "PipelineTarefaId");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("TarefaTagId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaTags", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("CodigoUnico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("FornecedorProdutoId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCusto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodigoUnico")
                        .IsUnique();

                    b.HasIndex("FornecedorProdutoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("CodigoUnico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorServicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCusto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodigoUnico")
                        .IsUnique();

                    b.HasIndex("FornecedorServicoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Servicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("TarefaTags", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeExibicao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppPrincipal")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            ApiKey = new Guid("57d390e7-2b87-47fe-9bc8-0bae3a388499"),
                            Cnpj = "12.368.943/0001-50",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 11, 24, 13, 57, 32, 633, DateTimeKind.Unspecified).AddTicks(6370), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            EmailPrincipal = "rafale@boxtecnologia.com.br",
                            IsDeleted = false,
                            Nome = "Box Tecnologia Ltda",
                            NomeExibicao = "Box Tecnologia",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 11, 24, 13, 57, 32, 633, DateTimeKind.Unspecified).AddTicks(6396), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationGroups")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany("ApplicationUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Clientes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteContratos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteProduto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteProdutos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Produto", "Produto")
                        .WithMany("ClienteProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteServico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteServicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Servico", "Servico")
                        .WithMany("ClienteServicos")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Fornecedores")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorProdutos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorServicos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Pipelines")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineAssinante", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineAssinantes")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PipelineAssinantes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineEtapas")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineEtapa", "PipelineEtapa")
                        .WithMany("PipelineTarefas")
                        .HasForeignKey("PipelineEtapaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineEtapa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAnexo", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaAnexos")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaApontamentos")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamentoAnexo", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefaApontamento", "PipelineTarefaApontamento")
                        .WithMany("PipelineTarefaApontamentoAnexos")
                        .HasForeignKey("PipelineTarefaApontamentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefaApontamento");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAssinante", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaAssinantes")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PipelineTarefaAssinantes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaTag", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaTags")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.TarefaTag", "TarefaTag")
                        .WithMany("PipelineTarefaTags")
                        .HasForeignKey("TarefaTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");

                    b.Navigation("TarefaTag");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.FornecedorProduto", "FornecedorProduto")
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FornecedorProduto");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.FornecedorServico", "FornecedorServico")
                        .WithMany("Servicos")
                        .HasForeignKey("FornecedorServicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Servicos")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FornecedorServico");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserGroups");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserClaims");

                    b.Navigation("ApplicationUserGroups");

                    b.Navigation("ApplicationUserRoles");

                    b.Navigation("PipelineAssinantes");

                    b.Navigation("PipelineTarefaAssinantes");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Navigation("ClienteContratos");

                    b.Navigation("ClienteProdutos");

                    b.Navigation("ClienteServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.Navigation("FornecedorProdutos");

                    b.Navigation("FornecedorServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.Navigation("PipelineAssinantes");

                    b.Navigation("PipelineEtapas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.Navigation("PipelineTarefas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.Navigation("PipelineTarefaAnexos");

                    b.Navigation("PipelineTarefaApontamentos");

                    b.Navigation("PipelineTarefaAssinantes");

                    b.Navigation("PipelineTarefaTags");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.Navigation("PipelineTarefaApontamentoAnexos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.Navigation("ClienteProdutos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.Navigation("ClienteServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.Navigation("PipelineTarefaTags");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Navigation("ApplicationGroups");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Clientes");

                    b.Navigation("Fornecedores");

                    b.Navigation("Pipelines");

                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
