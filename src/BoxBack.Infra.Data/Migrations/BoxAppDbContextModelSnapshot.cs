// <auto-generated />
using System;
using BoxBack.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoxBack.Infra.Data.Migrations
{
    [DbContext(typeof(BoxAppDbContext))]
    partial class BoxAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 12, 12, 14, 27, 49, 598, DateTimeKind.Unspecified).AddTicks(5339), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            IsDeleted = false,
                            Name = "Master",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UniqueKey = "ors0eAr4DPkvrwhy5gVnQAqRDnJUO43j9HzbkPyZ/7Q=",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 12, 12, 14, 27, 49, 598, DateTimeKind.Unspecified).AddTicks(5377), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int[]>("Actions")
                        .HasColumnType("integer[]");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            Actions = new[] { 0 },
                            ConcurrencyStamp = "4629cea3-3b65-43b9-9c4e-7cc68fe4e4e4",
                            Description = "Pode realizar todas as ações/operações, bem como ter acesso a todos os dados e funcionalidades",
                            Name = "Master",
                            NormalizedName = "MASTER",
                            Subject = "all"
                        },
                        new
                        {
                            Id = "8799544b-0bca-4bdf-87f6-3304ad3ca281",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "fe4914c4-69ab-47a9-a93f-384b445289ac",
                            Description = "Pode realizar todas as ações/operações em todas as dashboards",
                            Name = "CanDashboardAll",
                            NormalizedName = "CANDASHBOARDALL",
                            Subject = "ac-dashboard-page"
                        },
                        new
                        {
                            Id = "3852861a-2b49-4ae4-bc25-9eb0d66a0921",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "97b3a3d9-3599-4923-804b-b3ce77c9008b",
                            Description = "Pode visualizar todas as dashboards do cliente",
                            Name = "CanDashboardClienteAll",
                            NormalizedName = "CANDASHBOARDCLIENTEALL",
                            Subject = "ac-dashboardCliente-page"
                        },
                        new
                        {
                            Id = "ab40f165-b594-423f-8dcc-fe34dec701f4",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "a8be7a86-ffad-4a5c-a1d8-f8442c2674a4",
                            Description = "Pode visualizar todas as dashboards de controle de acesso",
                            Name = "CanDashboardControleAcessoAll",
                            NormalizedName = "CANDASHBOARDCONTROLEACESSOALL",
                            Subject = "ac-dashboardControleAcesso-page"
                        },
                        new
                        {
                            Id = "e5016046-1464-4d91-be38-6b09dfae5be1",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "d68cbc2e-dc89-4b46-89d1-9be535ca4517",
                            Description = "Pode realizar todas as ações/operações em todos os usuários",
                            Name = "CanUserAll",
                            NormalizedName = "CANUSERALL",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "6e0fbe72-a1e0-4082-a8a3-dad6289f5ce9",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "ffe6b666-9b93-4fde-8f1e-1d5758ee58a6",
                            Description = "Pode listar os dados de todos os usuários",
                            Name = "CanUserList",
                            NormalizedName = "CANUSERLIST",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "0c1ba200-7ef0-45be-bf38-599944930936",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "c16f581d-5218-49cb-9205-f266842c396a",
                            Description = "Pode listar os dados de um usuários",
                            Name = "CanUserRead",
                            NormalizedName = "CANUSERREAD",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "e17959bc-54d8-4c69-b41a-6b98c64728f6",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "e9e3fcbd-618c-4da5-8cbf-9dadbef83b79",
                            Description = "Pode criar um usuário",
                            Name = "CanUserCreate",
                            NormalizedName = "CANUSERCREATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "64db0219-a8c9-42d4-9985-2de54498363c",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "383992a3-c2ae-4fb8-9983-63f0043a690f",
                            Description = "Pode atualizar os dados de um usuário",
                            Name = "CanUserUpdate",
                            NormalizedName = "CANUSERUPDATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "07148ae3-5871-4543-9482-bf882cb62d25",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "5cb493af-3196-4d75-80b3-2e3bf7883237",
                            Description = "Pode deletar um usuário",
                            Name = "CanUserDelete",
                            NormalizedName = "CANUSERDELETE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "b8d37114-be28-4cc3-885e-60e5d594d5ea",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "c80aa8da-da86-455e-b692-35478e5a415e",
                            Description = "Pode realizar todas as ações/operações em todos as roles/permissões",
                            Name = "CanRoleAll",
                            NormalizedName = "CANROLEALL",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "194e54d6-6e46-4035-a66d-8de87b8885b1",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "426326cd-0de2-4b36-bf04-401507212421",
                            Description = "Pode listar os dados de todas as roles/permissões",
                            Name = "CanRoleList",
                            NormalizedName = "CANROLELIST",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "e7e988ae-2f21-4cdc-b4a8-d75e4fb450fa",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "7e3e3148-f7a9-47f0-bc69-3dbdd70d6917",
                            Description = "Pode listar os dados de uma roles/permissão",
                            Name = "CanRoleRead",
                            NormalizedName = "CANROLEREAD",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "4d8c8d80-63ab-4142-9e2f-2dacb1c670e9",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "10203d37-d3e3-4d6d-9b05-f97c845a0992",
                            Description = "Pode criar uma role/permissão",
                            Name = "CanRoleCreate",
                            NormalizedName = "CANROLECREATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "66ec27af-0f26-4651-a5cc-4cc4adb293ed",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "2524a0f1-45ba-4bde-a76b-38ee1542620f",
                            Description = "Pode atualizar os dados de uma roles/permissão",
                            Name = "CanRoleUpdate",
                            NormalizedName = "CANROLEUPDATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "5430d5d2-af89-46bd-8905-4891d552f0a5",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "850f9a7f-718e-4f9e-a125-520b7df56227",
                            Description = "Pode deletar uma role/permissão",
                            Name = "CanRoleDelete",
                            NormalizedName = "CANROLEDELETE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "aac41081-b865-4e17-bf5e-9288a9f8f515",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "07d20157-2f80-4428-bd80-64eb5c009e4b",
                            Description = "Pode realizar todas as ações/operações em todos os grupos",
                            Name = "CanGroupAll",
                            NormalizedName = "CANGROUPALL",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "c0fae096-6406-43b3-ad11-90ecfd89a4c8",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "8682aca6-4cec-4026-a6c9-48bb65b4a4ee",
                            Description = "Pode listar os dados de todos os grupos",
                            Name = "CanGroupList",
                            NormalizedName = "CANGROUPLIST",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "26107dbb-6173-4e0a-90bc-c6664699e2b3",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "1240408d-8d83-451f-86ab-cd798fe2fa6b",
                            Description = "Pode listar os dado de um grupo",
                            Name = "CanGroupRead",
                            NormalizedName = "CANGROUPREAD",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "56a65b3a-bb57-439f-9ba3-643dfa229d43",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "f084cc27-d3e9-442a-9741-7acf209e3f75",
                            Description = "Pode criar um grupo",
                            Name = "CanGroupCreate",
                            NormalizedName = "CANGROUPCREATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "1fae131c-db76-4249-8a65-afbc05e48380",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "dfb8131e-dfa5-494d-82df-cf01d381e848",
                            Description = "Pode atualizar os dados de um grupo",
                            Name = "CanGroupUpdate",
                            NormalizedName = "CANGROUPUPDATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "506121dd-8f90-49fb-9ab1-6ca094498702",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "d486339d-1fc2-4784-b4b8-f099a8767066",
                            Description = "Pode deletar um grupo",
                            Name = "CanGroupDelete",
                            NormalizedName = "CANGROUPDELETE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "5e2565e8-0fbe-4fca-b3f1-4ec4ff6e85f8",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "11104278-74ae-4979-a15f-7415b4adfbb4",
                            Description = "Pode visualizar todos os indicadores da dashboard comercial",
                            Name = "CanClienteAll",
                            NormalizedName = "CANCLIENTEALL",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "e5304c7a-ab4a-47a5-890c-6eed73a7489c",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "181a0966-a819-4c3e-bdc6-3fe5ad880c57",
                            Description = "Pode listar os dados de todos os clientes",
                            Name = "CanClienteList",
                            NormalizedName = "CANCLIENTELIST",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "313f2c5f-4ec4-42b3-87d9-40177420be6e",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "b3086e66-28af-44cd-b34a-ac08e31c99da",
                            Description = "Pode listar os dado de um cliente",
                            Name = "CanClienteRead",
                            NormalizedName = "CANCLIENTEREAD",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "361a5a0a-88db-47c2-9382-47f50650d406",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "20b1b58e-2fb5-4b39-b872-4dbf1f9c0713",
                            Description = "Pode criar um cliente",
                            Name = "CanClienteCreate",
                            NormalizedName = "CANCLIENTECREATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "a5a69f4a-2200-4b93-9732-68b85e35b0a1",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "f92bae90-1e7c-4cea-a5f0-525d5c59321d",
                            Description = "Pode atualizar os dados de um cliente",
                            Name = "CanClienteUpdate",
                            NormalizedName = "CANCLIENTEUPDATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "150d9bed-9579-41ee-b47e-6f9fc20cb840",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "c4024710-3af1-410b-a7cd-1e611d7575a7",
                            Description = "Pode deletar um cliente",
                            Name = "CanClienteDelete",
                            NormalizedName = "CANCLIENTEDELETE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "9650e427-6583-4bde-bd66-2340212bc1ff",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "f18725ea-9d68-4768-a12d-fdb10e0662f2",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de clientes",
                            Name = "CanClienteServicoAll",
                            NormalizedName = "CANCLIENTESERVICOALL",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "fce3882c-763a-4c8e-bc8c-746a5b5a3548",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "8bf02bc4-18a9-4a4d-88fa-c769e21c6f0b",
                            Description = "Pode listar os dados de todos os serviços de clientes",
                            Name = "CanClienteServicoList",
                            NormalizedName = "CANCLIENTESERVICOLIST",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "d670ae5c-716b-4348-aa8e-7ff78f99812d",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "2711e3b9-acff-4967-8eaf-544c7bba90ad",
                            Description = "Pode listar os dado de um serviço de cliente",
                            Name = "CanClienteServicoRead",
                            NormalizedName = "CANCLIENTESERVICOREAD",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "a2732607-3090-4981-9e58-5487104a5529",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "7acf3af1-231a-4c9d-801b-d66bb519119f",
                            Description = "Pode criar um serviço para um cliente",
                            Name = "CanClienteServicoCreate",
                            NormalizedName = "CANCLIENTESERVICOCREATE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "3648020e-9da9-414c-9915-4d628d25445f",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "4fb3d029-cd22-4556-ab62-143336f89716",
                            Description = "Pode atualizar um serviço de um cliente",
                            Name = "CanClienteServicoUpdate",
                            NormalizedName = "CANCLIENTESERVICOUPDATE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "2d1bc752-16e1-4ba6-9ec9-6fd9ac4a0708",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "1641ad4c-3261-4002-9faf-99ff07ab94fc",
                            Description = "Pode deletar um serviço de um cliente",
                            Name = "CanClienteServicoDelete",
                            NormalizedName = "CANCLIENTESERVICODELETE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "e5a26123-b6ab-4fd2-891c-122ab92dca6e",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "21fb6c7c-d8e5-4b51-b71c-0d2347e98f6a",
                            Description = "Pode realizar todas as ações/operações em todos os serviços",
                            Name = "CanServicoAll",
                            NormalizedName = "CANSERVICOALL",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "9fc86974-2d4a-4777-b15a-6b8629ae30c2",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "10b34a4c-b278-4d2f-a33f-304669c1e07d",
                            Description = "Pode listar os dados de todos os serviços",
                            Name = "CanServicoList",
                            NormalizedName = "CANSERVICOLIST",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "1571f7cd-431f-4614-a5dc-d29ff680f73b",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "9d4d5aae-dae9-4522-ba3f-fb5ad45002ac",
                            Description = "Pode listar os dados de um serviço",
                            Name = "CanServicoRead",
                            NormalizedName = "CANSERVICOREAD",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "484bd20b-32ca-4501-84e4-6777a0b9be24",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "c9819524-f500-4ee8-be2b-40a12869298e",
                            Description = "Pode atualizar um serviço",
                            Name = "CanServicoUpdate",
                            NormalizedName = "CANSERVICOUPDATE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "98030071-7722-40c8-8486-081cf358f0f6",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "c9804ad4-4ed1-4e92-9f5d-a259eea1a9e4",
                            Description = "Pode criar um serviço",
                            Name = "CanServicoCreate",
                            NormalizedName = "CANSERVICOCREATE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "a15eee08-83ae-410b-ba97-e2dfe71812cf",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "3bc0ca6b-2f11-4534-881b-da81c264f42a",
                            Description = "Pode deletar um serviço",
                            Name = "CanServicoDelete",
                            NormalizedName = "CANSERVICODELETE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "38cd8c4e-c5da-4291-81af-866f9a679566",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "66dc0e59-0f0f-4316-9bbd-358d30421016",
                            Description = "Pode realizar todas as ações/operações em todos os pipelines",
                            Name = "CanPipelineAll",
                            NormalizedName = "CANPIPELINEALL",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "f90c2c1e-0e56-4886-8be4-9b04152f949e",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "c852c54f-d75c-4b03-a477-252bf0aec3e9",
                            Description = "Pode listar os dados de todos os pipelines",
                            Name = "CanPipelineList",
                            NormalizedName = "CANPIPELINELIST",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "7a62f156-c516-40eb-a256-d44c428ceb59",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "b49ca0e9-4c65-41dc-9dfa-2a53c0af64a2",
                            Description = "Pode listar os dados de um pipeline",
                            Name = "CanPipelineRead",
                            NormalizedName = "CANPIPELINEREAD",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "9bb3197b-deaa-4b63-9a54-e38b838f0fcf",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "40ff26cd-b605-4d22-ab13-abc5e5636a63",
                            Description = "Pode criar um pipeline",
                            Name = "CanPipelineCreate",
                            NormalizedName = "CANPIPELINECREATE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "6b42243f-e83a-4b78-966d-4e251fb44212",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "748914ed-3669-4de8-b114-696d8bc9f8d8",
                            Description = "Pode atualizar um pipeline",
                            Name = "CanPipelineUpdate",
                            NormalizedName = "CANPIPELINEUPDATE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "223ad836-d5ae-4447-84ea-35c5ebba7adb",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "9306c73b-69fe-40b9-bed9-07e2a25d3839",
                            Description = "Pode deletar um pipeline",
                            Name = "CanPipelineDelete",
                            NormalizedName = "CANPIPELINEDELETE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "6d3c35a7-e146-4c6c-a76d-5d6a5572a017",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "48da83d0-2426-49bc-b020-95588c96b8d9",
                            Description = "Pode realizar todas as ações/operações em todos os fornecedores",
                            Name = "CanFornecedorAll",
                            NormalizedName = "CANFORNECEDORALL",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "4809df2e-6ddc-4862-95ee-bdab31f2e978",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "f90d99ce-82d8-4196-94aa-c5341df4ba8e",
                            Description = "Pode listar os dados de todos os fornecedores",
                            Name = "CanFornecedorList",
                            NormalizedName = "CANFORNECEDORLIST",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "558f024c-6c80-479a-8b6a-39b9a1444158",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "4b10f3ba-c205-4a9c-8811-7e37c4929d5d",
                            Description = "Pode listar os dados de um fornecedor",
                            Name = "CanFornecedorRead",
                            NormalizedName = "CANFORNECEDORREAD",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "9e787217-70d0-441b-9304-74eafa202e11",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "0d050fc2-1e9b-417b-ad9f-ae138dc07720",
                            Description = "Pode criar um fornecedor",
                            Name = "CanFornecedorCreate",
                            NormalizedName = "CANFORNECEDORCREATE",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "ed0296b2-3977-4b48-aeb8-d6921d233ac9",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "17e55728-b5dd-4b2c-bbb0-0eb6fd00f983",
                            Description = "Pode atualizar um fornecedor",
                            Name = "CanFornecedorUpdate",
                            NormalizedName = "CANFORNECEDORUPDATE",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "a8bcfe3d-92c7-4e38-bd4a-5035f0532a02",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "e44747a2-2df1-475a-9eb7-6ca512eea6e7",
                            Description = "Pode deletar um fornecedor",
                            Name = "CanForncedorDelete",
                            NormalizedName = "CANFORNCEDORDELETE",
                            Subject = "ac-forncedor-page"
                        },
                        new
                        {
                            Id = "5af1363e-1b37-4d98-b126-a4be48d1d7b9",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "9494febc-2fb2-4cca-9f63-531c994c9306",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de fornecedores",
                            Name = "CanFornecedorServicoAll",
                            NormalizedName = "CANFORNECEDORSERVICOALL",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "599e6a76-3f7d-4f1c-b024-e99960692868",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "0313da9b-64c2-405a-8254-a7683f8b5a09",
                            Description = "Pode listar os dados de todos os serviços de fornecedores",
                            Name = "CanFornecedorServicoList",
                            NormalizedName = "CANFORNECEDORSERVICOLIST",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "301c817e-9711-49ca-a804-ec8937a173b1",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "50bbccd8-4c6e-419d-98d3-ad53930450df",
                            Description = "Pode listar os dado de um serviço de fornecedor",
                            Name = "CanFornecedorServicoRead",
                            NormalizedName = "CANFORNECEDORSERVICOREAD",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "60c1aad6-c23f-4aa3-800b-5d498f2499b9",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "e1b02607-61a0-40f2-971f-295e81860288",
                            Description = "Pode criar um serviço para um fornecedor",
                            Name = "CanFornecedorServicoCreate",
                            NormalizedName = "CANFORNECEDORSERVICOCREATE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "afac8155-e85a-469b-aa88-dd988d5fe74c",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "36c09605-fbd1-4003-84c9-463b3ec4aa22",
                            Description = "Pode atualizar um serviço de um fornecedor",
                            Name = "CanFornecedorServicoUpdate",
                            NormalizedName = "CANFORNECEDORSERVICOUPDATE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "efa141e1-ed73-410f-95e0-b955ab04e402",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "471e3983-e40b-48e0-bb3e-161b36322b49",
                            Description = "Pode deletar um serviço de um fornecedor",
                            Name = "CanFornecedorServicoDelete",
                            NormalizedName = "CANFORNECEDORSERVICODELETE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "0f986edd-7b2a-47d9-a3e8-6f13897ffe41",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "ea9a5fa9-624c-41bc-9c55-876e18c62996",
                            Description = "Pode realizar todas as ações/operações em todos os produtos",
                            Name = "CanProdutoAll",
                            NormalizedName = "CANPRODUTOALL",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "36e82c44-16cb-49b6-9e0d-b90d6c78f51a",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "3d083871-f102-4363-8231-c38d772cf8ff",
                            Description = "Pode listar os dados de todos os produtos",
                            Name = "CanProdutoList",
                            NormalizedName = "CANPRODUTOLIST",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "d30fa63a-2b87-4fff-8510-6438e50c9d96",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "5026115e-c8b3-459b-8022-a6b067bd8da9",
                            Description = "Pode listar os dados de um produtos",
                            Name = "CanProdutoRead",
                            NormalizedName = "CANPRODUTOREAD",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "1abd14f5-e482-44ff-ae2d-e47c9b0a7955",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "a4cb65c8-a558-490d-83a2-10272bcdb2e6",
                            Description = "Pode criar um produtos",
                            Name = "CanProdutoCreate",
                            NormalizedName = "CANPRODUTOCREATE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "2a4fc896-45e4-4dec-b421-659aa044dede",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "38259bba-3161-4a95-8cda-c0b902188fb0",
                            Description = "Pode atualizar um produtos",
                            Name = "CanProdutoUpdate",
                            NormalizedName = "CANPRODUTOUPDATE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "520c6188-c4c9-4f07-ae15-0abf10a6fb52",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "dbb7718e-de17-4f64-acb8-1aabb6de7df7",
                            Description = "Pode deletar um produtos",
                            Name = "CanProdutoDelete",
                            NormalizedName = "CANPRODUTODELETE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "7a3c148e-ae63-4b6f-9a94-489b1f3bda97",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "10c23fc5-43dd-469b-b5c2-09bb43528d74",
                            Description = "Pode realizar todas as ações/operações em todos os contratos de clientes",
                            Name = "CanClienteContratoAll",
                            NormalizedName = "CANCLIENTECONTRATOALL",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "ff24d644-0f99-4ea5-9126-916e47816c3b",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "69806ed6-e4d7-4645-b879-43bad310b154",
                            Description = "Pode listar os dados de todos os contratos de clientes",
                            Name = "CanClienteContratoList",
                            NormalizedName = "CANCLIENTECONTRATOLIST",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "6347a4c1-7cb6-4e66-ac81-7bc02652c912",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "7c0632d9-04e4-42a8-8b27-6d69d9923224",
                            Description = "Pode listar os dados de um contrato de cliente",
                            Name = "CanClienteContratoRead",
                            NormalizedName = "CANCLIENTECONTRATOREAD",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "d32c80fa-7aea-4880-a6b9-b8052297c5e3",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "37875ca0-b6c1-4494-927c-a1966b44bcc4",
                            Description = "Pode criar um contrato de cliente",
                            Name = "CanClienteContratoCreate",
                            NormalizedName = "CANCLIENTECONTRATOCREATE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "8c23c165-a632-4d73-9a0c-0bbf61447880",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "309d1c8c-eaaf-4816-a5fd-4bd679f84f21",
                            Description = "Pode atualizar um contrato de cliente",
                            Name = "CanClienteContratoUpdate",
                            NormalizedName = "CANCLIENTECONTRATOUPDATE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "57987f31-928d-42ca-ae71-c0963b5ca557",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "a6929dfc-7a18-4b52-ade8-745a03649564",
                            Description = "Pode deletar um contrato de cliente",
                            Name = "CanClienteContratoDelete",
                            NormalizedName = "CANCLIENTECONTRATODELETE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "6a331b29-26ca-4fbf-bbd1-152f530930b5",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "79063eff-ee86-4971-b258-77f3f78db93d",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de clientes",
                            Name = "CanClienteProdutoAll",
                            NormalizedName = "CANCLIENTEPRODUTOALL",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "da363447-9dd5-402c-abe0-4b1d49a8922d",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "349345da-f884-48c8-a81e-c6f76dd7d37c",
                            Description = "Pode listar os dados de todos os produtos de clientes",
                            Name = "CanClienteProdutoList",
                            NormalizedName = "CANCLIENTEPRODUTOLIST",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "0bf9c1f5-12b3-46a3-a954-4024fab22f2d",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "e60875ce-3599-486d-a550-9b6f3eafa137",
                            Description = "Pode listar os dados de um produto de cliente",
                            Name = "CanClienteProdutoRead",
                            NormalizedName = "CANCLIENTEPRODUTOREAD",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "6d3f6741-8015-4b06-8920-e49dd99be030",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "7d8adbaa-85ca-4a31-a97f-21ab04cbf0bb",
                            Description = "Pode criar um produto de cliente",
                            Name = "CanClienteProdutoCreate",
                            NormalizedName = "CANCLIENTEPRODUTOCREATE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "7ca945c5-5151-49dd-8339-d58f76fbd3e2",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "2f8c372d-f4d3-421c-9f7a-e188fd406126",
                            Description = "Pode atualizar um produto de cliente",
                            Name = "CanClienteProdutoUpdate",
                            NormalizedName = "CANCLIENTEPRODUTOUPDATE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "8981e5a3-826e-46ed-ba8b-68f1d7c43c04",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "41610ee7-2af2-4872-8e8e-3e87858d9c4f",
                            Description = "Pode deletar um produto de cliente",
                            Name = "CanClienteProdutoDelete",
                            NormalizedName = "CANCLIENTEPRODUTODELETE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "4651e3a7-b07f-4545-9243-7ecd07ae0ae3",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "de9af1df-5006-4564-ac33-30291d69d294",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de fornecedores",
                            Name = "CanFornecedorProdutoAll",
                            NormalizedName = "CANFORNECEDORPRODUTOALL",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "55b54f58-28be-4d42-9ac2-f0c625b339c4",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "11dacc98-cbee-4a9b-ab30-aa5895fe3fa7",
                            Description = "Pode listar os dados de todos os produtos de fornecedores",
                            Name = "CanFornecedorProdutoList",
                            NormalizedName = "CANFORNECEDORPRODUTOLIST",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "7700a0c9-9708-4961-ae56-13214f7a5bb9",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "69fe3df7-5231-4061-a2ee-8c6e7bff30a1",
                            Description = "Pode listar os dados de um produto de fornecedor",
                            Name = "CanFornecedorProdutoRead",
                            NormalizedName = "CANFORNECEDORPRODUTOREAD",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "9400af5c-59b8-46aa-a918-a18d09e60f5d",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "ef1d2c1b-f2b1-42a8-95c8-6e7e6c485e4a",
                            Description = "Pode visualizar um produto de fornecedor",
                            Name = "CanFornecedorProdutoCreate",
                            NormalizedName = "CANFORNECEDORPRODUTOCREATE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "b8bfe123-e8a7-429c-a73d-dde1db5fcded",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "efacad8e-169f-47be-be2a-afc61efe5eaa",
                            Description = "Pode criar um produto de fornecedor",
                            Name = "CanFornecedorProdutoUpdate",
                            NormalizedName = "CANFORNECEDORPRODUTOUPDATE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "602eefd5-e715-47d8-a1f6-f16312533795",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "f4a93d97-fe73-40aa-80cc-33b6f97a18d9",
                            Description = "Pode deletar um produto de fornecedor",
                            Name = "CanFornecedorProdutoDelete",
                            NormalizedName = "CANFORNECEDORPRODUTODELETE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "0c8d4cea-5637-4d14-85a4-8c556c9bdfce",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "743dc1d5-fa5d-4356-84b4-ddbf77c5dfda",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de fornecedores",
                            Name = "CanDashboardComercialAll",
                            NormalizedName = "CANDASHBOARDCOMERCIALALL",
                            Subject = "ac-dashboardComercial-page"
                        },
                        new
                        {
                            Id = "15746bfc-05e7-4da6-9393-3637771a9fef",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "427244a0-4711-4d93-9278-ec73c8aeff1e",
                            Description = "CanDashboardComercialClienteContratoList",
                            Name = "CanDashboardComercialClienteContratoList",
                            NormalizedName = "CANDASHBOARDCOMERCIALCLIENTECONTRATOLIST",
                            Subject = "ac-dashboardComercialClienteContrato-page"
                        },
                        new
                        {
                            Id = "c765241f-e920-4c87-b59c-0ae5eb2196d9",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "b6ad8e1d-7ab3-4e94-a435-a6ca5bc21fd9",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroAll",
                            NormalizedName = "CANCHAVEAPITERCEIROALL",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "4a7fdee0-683e-4f54-9996-a9f456f417fe",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "8df3566a-fead-4240-9adc-7845cfb516de",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroList",
                            NormalizedName = "CANCHAVEAPITERCEIROLIST",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "768a8a9a-6b38-4dfc-85d0-70cf8d4accf0",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "dfa4234b-d2fe-44cf-8e71-7c73f514c666",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroRead",
                            NormalizedName = "CANCHAVEAPITERCEIROREAD",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "20267382-b4d5-4fcb-9699-49227dc9d742",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "eea25623-a49c-4a13-8dc6-6baeac8284f5",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroCreate",
                            NormalizedName = "CANCHAVEAPITERCEIROCREATE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "bf7df28a-5ba5-4c63-9536-fed66fc44d0f",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "f94476c3-39d4-48c7-bbbc-6e72c070d511",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroUpdate",
                            NormalizedName = "CANCHAVEAPITERCEIROUPDATE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "94818fb7-74e1-4579-b536-6407f1235ec5",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "3930e762-4b42-4a43-8ac2-bccfba7fd459",
                            Description = "Pode realizar todas as ações/operações em todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroDelete",
                            NormalizedName = "CANCHAVEAPITERCEIRODELETE",
                            Subject = "ac-chaveApiTerceiro-page"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetRoleGroups", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataAniversario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Funcao")
                        .HasColumnType("integer");

                    b.Property<int>("Genero")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TelefoneCelular")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasDefaultValue(99999999999L);

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "ca431822-360a-4ee6-b978-66564d429fc7",
                            DataAniversario = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alan.rezende@boxtecnologia.com.br",
                            EmailConfirmed = true,
                            FullName = "ALAN LEITE DE REZENDE",
                            Funcao = 0,
                            Genero = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAN.REZENDE@BOXTECNOLOGIA.COM.BR",
                            NormalizedUserName = "ALAN.REZENDE@BOXTECNOLOGIA.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGbgHKOKiDDs5fvXN8kHviorntHToMKurnVJNmsFQNInxhQOyZTwJ2w0SpbyCdZbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9514850-61dd-4cc1-b909-88b79b035643",
                            Setor = 0,
                            Status = 0,
                            TelefoneCelular = 0L,
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            TwoFactorEnabled = false,
                            UserName = "alan.rezende@boxtecnologia.com.br"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetUserGroups", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "b3a5b61d-7ff4-43cb-bad4-a945b150fc72"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ChaveApiTerceiro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("ApiTerceiro")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataValidade")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChavesApiTerceiro", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("650e797c-571e-4dee-a2db-c6cfa7119bd4"),
                            ApiTerceiro = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataValidade = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Cep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("20");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("50");

                    b.Property<string>("Cpf")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DataFundacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("5");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("500");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int?>("TipoPessoa")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<long?>("BomControleContratoId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Periodicidade")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorContrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,5)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClienteContratos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ClienteProdutos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<int>("CobrancaTipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ServicoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ServicoId");

                    b.ToTable("ClienteServicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Fornecedores", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<string>("CodigoProduto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorProdutos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<string>("CodigoServico")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorServicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("Pipelines", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineAssinante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.HasIndex("UserId");

                    b.ToTable("PipelineAssinantes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AlertaEstagnacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineEtapas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataConclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineEtapaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineEtapaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaAnexos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Titulo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaApontamentos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamentoAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaApontamentoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaApontamentoId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaApontamentoAnexos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAssinante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("UserId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaAssinantes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaTag", b =>
                {
                    b.Property<Guid>("TarefaTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("TarefaTagId", "PipelineTarefaId");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("TarefaTagId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaTags", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("CodigoUnico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("FornecedorProdutoId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCusto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodigoUnico")
                        .IsUnique();

                    b.HasIndex("FornecedorProdutoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("CodigoUnico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorServicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCusto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodigoUnico")
                        .IsUnique();

                    b.HasIndex("FornecedorServicoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Servicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("TarefaTags", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeExibicao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppPrincipal")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            ApiKey = new Guid("57d390e7-2b87-47fe-9bc8-0bae3a388499"),
                            Cnpj = "12.368.943/0001-50",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 12, 12, 14, 27, 49, 594, DateTimeKind.Unspecified).AddTicks(2484), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            EmailPrincipal = "rafale@boxtecnologia.com.br",
                            IsDeleted = false,
                            Nome = "Box Tecnologia Ltda",
                            NomeExibicao = "Box Tecnologia",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 12, 12, 14, 27, 49, 594, DateTimeKind.Unspecified).AddTicks(2511), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("ApplicationRoleClaim");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationGroups")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany("ApplicationUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Clientes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteContratos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteProduto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteProdutos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Produto", "Produto")
                        .WithMany("ClienteProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteServico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteServicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Servico", "Servico")
                        .WithMany("ClienteServicos")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Fornecedores")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorProdutos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorServicos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Pipelines")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineAssinante", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineAssinantes")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PipelineAssinantes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineEtapas")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineEtapa", "PipelineEtapa")
                        .WithMany("PipelineTarefas")
                        .HasForeignKey("PipelineEtapaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineEtapa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAnexo", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaAnexos")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaApontamentos")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamentoAnexo", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefaApontamento", "PipelineTarefaApontamento")
                        .WithMany("PipelineTarefaApontamentoAnexos")
                        .HasForeignKey("PipelineTarefaApontamentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefaApontamento");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAssinante", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaAssinantes")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PipelineTarefaAssinantes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaTag", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaTags")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.TarefaTag", "TarefaTag")
                        .WithMany("PipelineTarefaTags")
                        .HasForeignKey("TarefaTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");

                    b.Navigation("TarefaTag");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.FornecedorProduto", "FornecedorProduto")
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FornecedorProduto");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.FornecedorServico", "FornecedorServico")
                        .WithMany("Servicos")
                        .HasForeignKey("FornecedorServicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Servicos")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FornecedorServico");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserGroups");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationRoleClaims");

                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserClaims");

                    b.Navigation("ApplicationUserGroups");

                    b.Navigation("ApplicationUserRoles");

                    b.Navigation("PipelineAssinantes");

                    b.Navigation("PipelineTarefaAssinantes");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Navigation("ClienteContratos");

                    b.Navigation("ClienteProdutos");

                    b.Navigation("ClienteServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.Navigation("FornecedorProdutos");

                    b.Navigation("FornecedorServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.Navigation("PipelineAssinantes");

                    b.Navigation("PipelineEtapas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.Navigation("PipelineTarefas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.Navigation("PipelineTarefaAnexos");

                    b.Navigation("PipelineTarefaApontamentos");

                    b.Navigation("PipelineTarefaAssinantes");

                    b.Navigation("PipelineTarefaTags");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.Navigation("PipelineTarefaApontamentoAnexos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.Navigation("ClienteProdutos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.Navigation("ClienteServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.Navigation("PipelineTarefaTags");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Navigation("ApplicationGroups");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Clientes");

                    b.Navigation("Fornecedores");

                    b.Navigation("Pipelines");

                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
