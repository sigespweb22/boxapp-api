// <auto-generated />
using System;
using BoxBack.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoxBack.Infra.Data.Migrations
{
    [DbContext(typeof(BoxAppDbContext))]
    [Migration("20221215144528_v0.0.9")]
    partial class v009
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 12, 15, 11, 45, 27, 486, DateTimeKind.Unspecified).AddTicks(9690), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            IsDeleted = false,
                            Name = "Master",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UniqueKey = "ors0eAr4DPkvrwhy5gVnQAqRDnJUO43j9HzbkPyZ/7Q=",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 12, 15, 11, 45, 27, 486, DateTimeKind.Unspecified).AddTicks(9713), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int[]>("Actions")
                        .HasColumnType("integer[]");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            Actions = new[] { 0 },
                            ConcurrencyStamp = "4629cea3-3b65-43b9-9c4e-7cc68fe4e4e4",
                            Description = "Pode realizar todas as ações/operações, bem como ter acesso a todos os dados e funcionalidades",
                            Name = "Master",
                            NormalizedName = "MASTER",
                            Subject = "all"
                        },
                        new
                        {
                            Id = "47f94030-648a-434b-916e-31c6e20a137b",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "6439b43a-093c-4b2c-b8e0-e9c93ec78b45",
                            Description = "Pode realizar todas as ações/operações em todas as dashboards",
                            Name = "CanDashboardAll",
                            NormalizedName = "CANDASHBOARDALL",
                            Subject = "ac-dashboard-page"
                        },
                        new
                        {
                            Id = "dfbb87d9-b68b-42f6-a2ef-9e5731e09083",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "722fc8a9-5185-435f-9840-4290683ef0e4",
                            Description = "Pode visualizar todas as dashboards do cliente",
                            Name = "CanDashboardClienteAll",
                            NormalizedName = "CANDASHBOARDCLIENTEALL",
                            Subject = "ac-dashboardCliente-page"
                        },
                        new
                        {
                            Id = "8ec9209e-5c4b-4b01-9212-f7d166c6a335",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "785d366d-1887-4eee-a599-25a9d0c88296",
                            Description = "Pode visualizar todas as dashboards de controle de acesso",
                            Name = "CanDashboardControleAcessoAll",
                            NormalizedName = "CANDASHBOARDCONTROLEACESSOALL",
                            Subject = "ac-dashboardControleAcesso-page"
                        },
                        new
                        {
                            Id = "1e79ca5a-4923-41c4-860d-188d8014ee27",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "36119104-4abb-4e9a-b9dc-18328758afae",
                            Description = "Pode realizar todas as ações/operações em todos os usuários",
                            Name = "CanUserAll",
                            NormalizedName = "CANUSERALL",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "8131098d-e358-4a9b-8a51-8f137ce2d20c",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "e0e3e6ff-9619-4b69-810f-e0f08d980cbd",
                            Description = "Pode listar os dados de todos os usuários",
                            Name = "CanUserList",
                            NormalizedName = "CANUSERLIST",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "f75f13c8-d6ab-4f51-b6be-79cef293ef1d",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "f66b6d87-2508-44bc-8287-93ed128b934b",
                            Description = "Pode listar os dados de um usuários",
                            Name = "CanUserRead",
                            NormalizedName = "CANUSERREAD",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "5f576638-d844-4037-a7a2-7d0225816f8f",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "9d14666c-3e5b-480b-9e46-c8cc95731815",
                            Description = "Pode criar um usuário",
                            Name = "CanUserCreate",
                            NormalizedName = "CANUSERCREATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "b3b805f6-401b-4d20-878d-bfa8a0971aab",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "b915665a-7e57-4cb9-97ba-6385717ad910",
                            Description = "Pode atualizar os dados de um usuário",
                            Name = "CanUserUpdate",
                            NormalizedName = "CANUSERUPDATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "016f9113-7037-4af2-8367-1ed7407d52ef",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "2d8aae2d-3f97-4908-9c0f-aa8047c41992",
                            Description = "Pode deletar um usuário",
                            Name = "CanUserDelete",
                            NormalizedName = "CANUSERDELETE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "0b08eec4-350b-43df-8ea4-12994c030849",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "4046122e-6f8a-4463-aa6d-679518747e81",
                            Description = "Pode realizar todas as ações/operações em todos as roles/permissões",
                            Name = "CanRoleAll",
                            NormalizedName = "CANROLEALL",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "05d319d0-9352-4f70-850d-3d25871ae256",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "3e14e349-b40d-40de-9a47-c1b3ea041c50",
                            Description = "Pode listar os dados de todas as roles/permissões",
                            Name = "CanRoleList",
                            NormalizedName = "CANROLELIST",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "e45d0b87-8aff-4e1c-b50c-c437984ecf95",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "0b0f4800-627c-430d-ab5c-971654e2aea2",
                            Description = "Pode listar os dados de uma roles/permissão",
                            Name = "CanRoleRead",
                            NormalizedName = "CANROLEREAD",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "aaf82b5c-afc3-4ab0-93cc-2a5451e27450",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "72cc1cee-1c1b-46ef-8b14-4dea0eb994ce",
                            Description = "Pode criar uma role/permissão",
                            Name = "CanRoleCreate",
                            NormalizedName = "CANROLECREATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "ef4e7311-1f4f-416b-83b6-bbc175fd4ba8",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "17e24e94-7ffd-4ccb-af43-602c90a9437b",
                            Description = "Pode atualizar os dados de uma roles/permissão",
                            Name = "CanRoleUpdate",
                            NormalizedName = "CANROLEUPDATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "64ff7235-87a5-44ab-a0af-e0b78807d4e7",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "5067d294-06b9-4823-a66d-bbc591f9f376",
                            Description = "Pode deletar uma role/permissão",
                            Name = "CanRoleDelete",
                            NormalizedName = "CANROLEDELETE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "07aa70b2-f701-4ad8-b74f-d23d5f36884c",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "eaea06ba-32c2-410e-86a8-b763af994c60",
                            Description = "Pode realizar todas as ações/operações em todos os grupos",
                            Name = "CanGroupAll",
                            NormalizedName = "CANGROUPALL",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "ce4a3712-9053-4b80-9733-c94272babe07",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "d807db51-f98e-4680-8264-2541e1521c2c",
                            Description = "Pode listar os dados de todos os grupos",
                            Name = "CanGroupList",
                            NormalizedName = "CANGROUPLIST",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "c8aa202f-6fcb-42cf-bb44-06faf869718f",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "a3f6d17f-9982-4e26-818f-25962a026727",
                            Description = "Pode listar os dado de um grupo",
                            Name = "CanGroupRead",
                            NormalizedName = "CANGROUPREAD",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "9f9f4147-1226-43b3-90d3-a80c8a88d8b5",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "0b366945-6113-475b-8cf1-5348caf75397",
                            Description = "Pode criar um grupo",
                            Name = "CanGroupCreate",
                            NormalizedName = "CANGROUPCREATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "b9b13cd5-0a38-45b7-b3cc-1032ec177d05",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "789a27d6-c917-40a6-b6c4-908f5bb89540",
                            Description = "Pode atualizar os dados de um grupo",
                            Name = "CanGroupUpdate",
                            NormalizedName = "CANGROUPUPDATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "71066d5f-2e3e-4770-b12f-e4fe59d92a6c",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "4a4a5f73-ef25-4fa3-ba0e-f71fcf900d7b",
                            Description = "Pode deletar um grupo",
                            Name = "CanGroupDelete",
                            NormalizedName = "CANGROUPDELETE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "244c0062-3ebd-4b8b-9136-6fb324880783",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "4b5cb889-78ca-40e8-a29a-afb959231507",
                            Description = "Pode visualizar todos os indicadores da dashboard comercial",
                            Name = "CanClienteAll",
                            NormalizedName = "CANCLIENTEALL",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "f285d955-51f4-455e-b570-02cb1caeaa5c",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "c59e8c63-d453-4e70-9c2c-3496f8c45b5c",
                            Description = "Pode listar os dados de todos os clientes",
                            Name = "CanClienteList",
                            NormalizedName = "CANCLIENTELIST",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "3055eca1-138d-4da7-9018-05f12a02b564",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "4804adca-1d91-44e6-a17e-f53c66f16051",
                            Description = "Pode listar os dado de um cliente",
                            Name = "CanClienteRead",
                            NormalizedName = "CANCLIENTEREAD",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "f65cc632-323d-45ab-856b-a97ff67cf3ce",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "85747b50-7e2a-409a-a127-e12a423e6423",
                            Description = "Pode criar um cliente",
                            Name = "CanClienteCreate",
                            NormalizedName = "CANCLIENTECREATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "456b5abc-90cf-4f0e-9ff6-53f2a9ab201a",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "27cbded9-d2c3-4ebc-8c41-b6cf533113b9",
                            Description = "Pode atualizar os dados de um cliente",
                            Name = "CanClienteUpdate",
                            NormalizedName = "CANCLIENTEUPDATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "321b3e00-c394-43ed-9d9a-6279776a02ed",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "38786d91-b1d2-4825-8bae-80280b844d07",
                            Description = "Pode deletar um cliente",
                            Name = "CanClienteDelete",
                            NormalizedName = "CANCLIENTEDELETE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "aea4b3b1-20a7-49ec-8f3a-b30cdb7d4775",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "cd5424a5-e764-48fb-a057-fc8fece0b355",
                            Description = "Pode listar o título do sistema",
                            Name = "CanTitleSystemList",
                            NormalizedName = "CANTITLESYSTEMLIST",
                            Subject = "ac-titleSystem-page"
                        },
                        new
                        {
                            Id = "792d5786-fa27-41e1-9856-7613b035453b",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "7e5c69f5-79e3-4703-b1f1-5ac4c079e22a",
                            Description = "Pode listar o título dos negócios",
                            Name = "CanTitleBussinesList",
                            NormalizedName = "CANTITLEBUSSINESLIST",
                            Subject = "ac-titleBussines-page"
                        },
                        new
                        {
                            Id = "6fa942a8-a109-45ab-a367-7a8c3efde243",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "e5234b3c-44a9-4928-afdd-c41410487671",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de clientes",
                            Name = "CanClienteServicoAll",
                            NormalizedName = "CANCLIENTESERVICOALL",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "9e0363d5-db1b-4999-8b0f-4116c94e6c2b",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "63ae641f-8587-46ee-a150-0b515b2c5161",
                            Description = "Pode listar os dados de todos os serviços de clientes",
                            Name = "CanClienteServicoList",
                            NormalizedName = "CANCLIENTESERVICOLIST",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "283206c0-d22e-4cf8-81d6-e2dc718f3317",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "3e1773b5-b1f9-44aa-b05f-314df8bc7eda",
                            Description = "Pode listar os dado de um serviço de cliente",
                            Name = "CanClienteServicoRead",
                            NormalizedName = "CANCLIENTESERVICOREAD",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "fb3902c0-998a-41df-9bf4-1fef6cc80b36",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "05f598d2-a57a-484b-9be9-38e4366fb517",
                            Description = "Pode criar um serviço para um cliente",
                            Name = "CanClienteServicoCreate",
                            NormalizedName = "CANCLIENTESERVICOCREATE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "ada4cdc1-ade3-49fa-8fdd-b739e81072e6",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "8b2fdebf-2008-46a8-81b2-5f012dbb9c1e",
                            Description = "Pode atualizar um serviço de um cliente",
                            Name = "CanClienteServicoUpdate",
                            NormalizedName = "CANCLIENTESERVICOUPDATE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "a2fc8aca-b389-495d-a39d-d88eb6b57c12",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "f7ea5b46-0634-4996-8517-7eff54c96884",
                            Description = "Pode deletar um serviço de um cliente",
                            Name = "CanClienteServicoDelete",
                            NormalizedName = "CANCLIENTESERVICODELETE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "e1707ae7-fcec-4f89-9efd-d72e0e5df6f3",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "5a4b4bd7-d9c5-4b17-93f2-8d8d87b1d994",
                            Description = "Pode realizar todas as ações/operações em todos os serviços",
                            Name = "CanServicoAll",
                            NormalizedName = "CANSERVICOALL",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "64e94d32-f963-45ba-a919-2b8c68c402a2",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "74e631d2-ad0f-4c6c-a578-a23c25d171bc",
                            Description = "Pode listar os dados de todos os serviços",
                            Name = "CanServicoList",
                            NormalizedName = "CANSERVICOLIST",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "ebe48ecf-1b76-4e8d-aecc-3f9099f39337",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "21f64df8-7b61-4c7d-b32c-44632e7beb0a",
                            Description = "Pode listar os dados de um serviço",
                            Name = "CanServicoRead",
                            NormalizedName = "CANSERVICOREAD",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "7b4af599-87d9-4ea0-8c90-3a2a05d4b12a",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "6ec049f9-4ce7-4267-9323-cc2875a2226c",
                            Description = "Pode atualizar um serviço",
                            Name = "CanServicoUpdate",
                            NormalizedName = "CANSERVICOUPDATE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "3ea7a8a6-d7da-4adb-8b2d-671f1e6630b8",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "f8de984f-b0d4-431e-9d2d-add7d713cd13",
                            Description = "Pode criar um serviço",
                            Name = "CanServicoCreate",
                            NormalizedName = "CANSERVICOCREATE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "0b2ce7bd-8649-46a3-9ebe-6936597c1364",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "68362694-71a1-418e-85cb-5e48054bffad",
                            Description = "Pode deletar um serviço",
                            Name = "CanServicoDelete",
                            NormalizedName = "CANSERVICODELETE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "7e9e4664-89cd-4ac1-baf4-34090d9f4d6d",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "8c00b90f-3ca4-465a-97e8-e18ae4461fc1",
                            Description = "Pode realizar todas as ações/operações em todos os pipelines",
                            Name = "CanPipelineAll",
                            NormalizedName = "CANPIPELINEALL",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "64b6e57d-176b-4e13-8936-8d2c2bb8687d",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "7c472c1a-1f89-4652-9672-c120f4a3b887",
                            Description = "Pode listar os dados de todos os pipelines",
                            Name = "CanPipelineList",
                            NormalizedName = "CANPIPELINELIST",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "7a14c990-97ce-45ea-bd94-67254e6b6b0d",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "48ad8532-b8da-4bed-b958-799ace43ec4e",
                            Description = "Pode listar os dados de um pipeline",
                            Name = "CanPipelineRead",
                            NormalizedName = "CANPIPELINEREAD",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "f5736050-77c3-469e-9233-22ce24529e00",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "5b6b003f-984c-4255-a077-624210285d76",
                            Description = "Pode criar um pipeline",
                            Name = "CanPipelineCreate",
                            NormalizedName = "CANPIPELINECREATE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "896b837f-5bbb-4bfd-8480-6844bdb55bd7",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "0b4b1e87-e69d-4753-9c3a-637b25d3d541",
                            Description = "Pode atualizar um pipeline",
                            Name = "CanPipelineUpdate",
                            NormalizedName = "CANPIPELINEUPDATE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "455328b6-3a29-49a6-975e-4ffc591bf769",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "51d112dd-f877-42b7-ab9c-4df7826b3900",
                            Description = "Pode deletar um pipeline",
                            Name = "CanPipelineDelete",
                            NormalizedName = "CANPIPELINEDELETE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "4ec2c3bd-734c-493d-bfeb-51ce2d7bed4e",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "4c5f9317-9dae-4e0d-b7cb-e296079f4389",
                            Description = "Pode realizar todas as ações/operações em todos os fornecedores",
                            Name = "CanFornecedorAll",
                            NormalizedName = "CANFORNECEDORALL",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "808087a3-7267-429f-9a21-2f209adac93b",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "b0a7f354-6df3-4680-b278-b8ac0a7b4aa4",
                            Description = "Pode listar os dados de todos os fornecedores",
                            Name = "CanFornecedorList",
                            NormalizedName = "CANFORNECEDORLIST",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "e4e79514-7526-4e12-b8b4-086cd9a7c9aa",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "ac808683-dac5-475c-830b-4114007608d7",
                            Description = "Pode listar os dados de um fornecedor",
                            Name = "CanFornecedorRead",
                            NormalizedName = "CANFORNECEDORREAD",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "b8debce7-24d7-4b34-a0f7-5e46413acff9",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "d79c49c1-9cc6-4f77-87cc-af4327f02e83",
                            Description = "Pode criar um fornecedor",
                            Name = "CanFornecedorCreate",
                            NormalizedName = "CANFORNECEDORCREATE",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "29e20fdc-953d-45af-8bae-bae9c9f3586b",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "f045f480-106d-4fa1-a05e-3e9fe4c3a45e",
                            Description = "Pode atualizar um fornecedor",
                            Name = "CanFornecedorUpdate",
                            NormalizedName = "CANFORNECEDORUPDATE",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "066969cf-a6d2-4277-8e38-c55654718c6d",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "dd2d4cb5-2508-4a57-bbdc-7e2613c49c9a",
                            Description = "Pode deletar um fornecedor",
                            Name = "CanForncedorDelete",
                            NormalizedName = "CANFORNCEDORDELETE",
                            Subject = "ac-forncedor-page"
                        },
                        new
                        {
                            Id = "646ecf31-3ee6-4e0d-bb8d-3e21dad16e50",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "64f007ad-9d2c-47ef-936c-8ac1bf3aaf3b",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de fornecedores",
                            Name = "CanFornecedorServicoAll",
                            NormalizedName = "CANFORNECEDORSERVICOALL",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "d1aa0224-2d76-4f45-ad04-aeb837dd89b0",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "abf723e2-085f-447e-a369-aa8a7945f5b7",
                            Description = "Pode listar os dados de todos os serviços de fornecedores",
                            Name = "CanFornecedorServicoList",
                            NormalizedName = "CANFORNECEDORSERVICOLIST",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "efb0b74e-7413-4ebc-86d1-36fc1d34ae1c",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "571ae89b-fb67-44e8-94b4-a48a436b106b",
                            Description = "Pode listar os dado de um serviço de fornecedor",
                            Name = "CanFornecedorServicoRead",
                            NormalizedName = "CANFORNECEDORSERVICOREAD",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "8467ae2c-edce-4127-abfb-653fd0e2d74f",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "39a307eb-a5c4-49ca-8244-0a99dd9ca267",
                            Description = "Pode criar um serviço para um fornecedor",
                            Name = "CanFornecedorServicoCreate",
                            NormalizedName = "CANFORNECEDORSERVICOCREATE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "8ae3fcac-da0a-4690-ab29-83b251d1e1c4",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "33fd0e58-407b-4e3a-80ed-a2925a96b474",
                            Description = "Pode atualizar um serviço de um fornecedor",
                            Name = "CanFornecedorServicoUpdate",
                            NormalizedName = "CANFORNECEDORSERVICOUPDATE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "85185c71-9e64-4e27-96e9-3313a69acab2",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "fc715c41-252c-44d3-99e4-fda89f214bb1",
                            Description = "Pode deletar um serviço de um fornecedor",
                            Name = "CanFornecedorServicoDelete",
                            NormalizedName = "CANFORNECEDORSERVICODELETE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "0b648895-ea54-45f9-a6c1-ec2edb47e3f3",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "b0826c11-9446-48d4-bdb9-0f5f2a3c3304",
                            Description = "Pode realizar todas as ações/operações em todos os produtos",
                            Name = "CanProdutoAll",
                            NormalizedName = "CANPRODUTOALL",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "4aaaf0fb-b38e-4678-a61d-73e4722fabb6",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "f9129332-930f-4c66-836c-f0d134a03843",
                            Description = "Pode listar os dados de todos os produtos",
                            Name = "CanProdutoList",
                            NormalizedName = "CANPRODUTOLIST",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "34e4341b-24d0-47db-8028-0bc09b2a9353",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "09f08a35-a203-4e0d-bbc7-29db838ffea2",
                            Description = "Pode listar os dados de um produtos",
                            Name = "CanProdutoRead",
                            NormalizedName = "CANPRODUTOREAD",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "d6680956-a28a-4d26-b403-d803feb48f36",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "594a8498-d344-4352-92da-ba60fe5e0b9d",
                            Description = "Pode criar um produtos",
                            Name = "CanProdutoCreate",
                            NormalizedName = "CANPRODUTOCREATE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "da65068f-bf95-40af-ba26-8554a5b7937f",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "4f9e405a-0cb6-42ac-a8a4-42a38ddb2ee2",
                            Description = "Pode atualizar um produtos",
                            Name = "CanProdutoUpdate",
                            NormalizedName = "CANPRODUTOUPDATE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "a831e067-c792-466a-adc1-612c0c0b939a",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "20d79340-1978-4b27-a341-9624ac73a999",
                            Description = "Pode deletar um produtos",
                            Name = "CanProdutoDelete",
                            NormalizedName = "CANPRODUTODELETE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "ad32c323-ffaa-437c-bedf-110814cc5867",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "c602d109-9730-47ad-aa9f-a779c8772757",
                            Description = "Pode realizar todas as ações/operações em todos os contratos de clientes",
                            Name = "CanClienteContratoAll",
                            NormalizedName = "CANCLIENTECONTRATOALL",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "10c049bf-f1b2-4893-8e93-13a410764c02",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "1fc3bb77-5eab-4454-a1ff-47d0cc695d0e",
                            Description = "Pode listar os dados de todos os contratos de clientes",
                            Name = "CanClienteContratoList",
                            NormalizedName = "CANCLIENTECONTRATOLIST",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "de0d9e83-c5f5-4377-ba63-7e3d8bd8c52f",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "c8f52d6c-5e7b-4cc5-b007-2be3c82e444a",
                            Description = "Pode listar os dados de um contrato de cliente",
                            Name = "CanClienteContratoRead",
                            NormalizedName = "CANCLIENTECONTRATOREAD",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "dd3551e5-bf11-483d-87fb-62d43ec75385",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "4952b243-9bdb-4b3b-b20a-9b6f4b31fc13",
                            Description = "Pode criar um contrato de cliente",
                            Name = "CanClienteContratoCreate",
                            NormalizedName = "CANCLIENTECONTRATOCREATE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "87b821d0-7edd-49a6-b50b-5a506b0d149a",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "e4b13630-67c6-4cd4-a6c5-eaa3497353f8",
                            Description = "Pode atualizar um contrato de cliente",
                            Name = "CanClienteContratoUpdate",
                            NormalizedName = "CANCLIENTECONTRATOUPDATE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "a272b732-b67b-4e16-a31d-b12263644c2d",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "d0289d46-7b51-4bd3-9594-abb1fc9aea24",
                            Description = "Pode deletar um contrato de cliente",
                            Name = "CanClienteContratoDelete",
                            NormalizedName = "CANCLIENTECONTRATODELETE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "f89b756a-d4e5-43a2-9d20-ce50386e8db6",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "fb73dc6f-36ca-4d05-87c4-38fc489eba3e",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de clientes",
                            Name = "CanClienteProdutoAll",
                            NormalizedName = "CANCLIENTEPRODUTOALL",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "365d560d-6030-48d0-96c9-dd9d7178bd61",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "61e68c5f-cf88-4582-af0c-3ed61a046faf",
                            Description = "Pode listar os dados de todos os produtos de clientes",
                            Name = "CanClienteProdutoList",
                            NormalizedName = "CANCLIENTEPRODUTOLIST",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "3f73254a-8e19-43fc-9201-b5ace9c8ed50",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "15466004-c46d-4ed8-b05d-a40875ecb9b5",
                            Description = "Pode listar os dados de um produto de cliente",
                            Name = "CanClienteProdutoRead",
                            NormalizedName = "CANCLIENTEPRODUTOREAD",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "df2cc724-e9e8-436d-9146-eac742f7b93f",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "45e4f022-2cf4-4e37-af8e-0eb6544a479e",
                            Description = "Pode criar um produto de cliente",
                            Name = "CanClienteProdutoCreate",
                            NormalizedName = "CANCLIENTEPRODUTOCREATE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "992f9b14-748d-438f-9f8a-acfe38a1cf7a",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "fef791de-81a7-4d71-85c0-a0f2916f9bb8",
                            Description = "Pode atualizar um produto de cliente",
                            Name = "CanClienteProdutoUpdate",
                            NormalizedName = "CANCLIENTEPRODUTOUPDATE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "5d7bf649-04d6-4a08-aad5-af0ccb034b4f",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "0bc22889-eda0-41c4-b8a9-2a219f8c8673",
                            Description = "Pode deletar um produto de cliente",
                            Name = "CanClienteProdutoDelete",
                            NormalizedName = "CANCLIENTEPRODUTODELETE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "267b646b-f17f-45f0-ab0a-0aa7b05d6fa4",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "80f2cf9b-f0c9-445e-9858-9d7c7929cf8d",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de fornecedores",
                            Name = "CanFornecedorProdutoAll",
                            NormalizedName = "CANFORNECEDORPRODUTOALL",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "ba165d12-bbb2-457f-b9f3-ed657940e718",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "bb6fa03d-9f2f-4820-a620-9ae1d45925a4",
                            Description = "Pode listar os dados de todos os produtos de fornecedores",
                            Name = "CanFornecedorProdutoList",
                            NormalizedName = "CANFORNECEDORPRODUTOLIST",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "38a1ed96-7a71-45f9-8fce-43559b9d30bf",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "0dcd237f-5ddf-4467-afd0-4b2856836ac9",
                            Description = "Pode listar os dados de um produto de fornecedor",
                            Name = "CanFornecedorProdutoRead",
                            NormalizedName = "CANFORNECEDORPRODUTOREAD",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "b4f9ee7d-25d2-4ac2-a4e2-c2589c35e8cf",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "c1e02594-2872-422c-a19d-201a436a0ab7",
                            Description = "Pode visualizar um produto de fornecedor",
                            Name = "CanFornecedorProdutoCreate",
                            NormalizedName = "CANFORNECEDORPRODUTOCREATE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "423023da-60a5-47ef-a48c-52b2a8a8c3f4",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "12b1f7c4-31a7-43a9-a45c-122da7c89a10",
                            Description = "Pode criar um produto de fornecedor",
                            Name = "CanFornecedorProdutoUpdate",
                            NormalizedName = "CANFORNECEDORPRODUTOUPDATE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "cb119d3f-eb03-431a-b00f-21a97b9b3551",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "688394c0-2a34-45ec-b62d-5bd776e0d348",
                            Description = "Pode deletar um produto de fornecedor",
                            Name = "CanFornecedorProdutoDelete",
                            NormalizedName = "CANFORNECEDORPRODUTODELETE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "e2c831b7-25bf-4385-8a14-3168b2c22350",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "94a58825-c029-4dc9-b09a-2a491160e81c",
                            Description = "Pode realizar todas as ações/operações em dashboard comercial",
                            Name = "CanDashboardComercialAll",
                            NormalizedName = "CANDASHBOARDCOMERCIALALL",
                            Subject = "ac-dashboardComercial-page"
                        },
                        new
                        {
                            Id = "0599d8be-fc2c-4a1c-948f-b6b849874c14",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "0caee24b-4078-4a75-8919-3d7213a707e8",
                            Description = "CanDashboardComercialClienteContratoList",
                            Name = "CanDashboardComercialClienteContratoList",
                            NormalizedName = "CANDASHBOARDCOMERCIALCLIENTECONTRATOLIST",
                            Subject = "ac-dashboardComercialClienteContrato-page"
                        },
                        new
                        {
                            Id = "b5e15b2d-efea-4093-8bd0-be553c00fa1a",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "48233bf0-d0db-4ddf-8e87-3fc88c070453",
                            Description = "Pode atualizar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroAll",
                            NormalizedName = "CANCHAVEAPITERCEIROALL",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "5c329486-126b-4e9a-a9c6-ec0fd1051748",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "fec544b4-6e67-46fb-9b2f-b88b9053a44a",
                            Description = "Pode atualizar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroList",
                            NormalizedName = "CANCHAVEAPITERCEIROLIST",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "add57028-7279-41e2-ac89-5d675f7fd25a",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "65ca49b6-7251-41f4-ae46-83b22e66dd4f",
                            Description = "Pode atualizar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroRead",
                            NormalizedName = "CANCHAVEAPITERCEIROREAD",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "e7285402-256d-4f58-8f03-ecc566af7a97",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "4385919d-eef5-4b33-8d58-da185cf030e3",
                            Description = "Pode atualizar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroCreate",
                            NormalizedName = "CANCHAVEAPITERCEIROCREATE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "42d4f056-6ccf-4026-9b94-3f18d3c59f91",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "342caad1-daca-40e0-b588-ddc1a05837b7",
                            Description = "Pode atualizar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroUpdate",
                            NormalizedName = "CANCHAVEAPITERCEIROUPDATE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "58b5c6c6-8fd8-4cab-9c03-f8427e9bac22",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "039330f0-b9d6-489a-be3d-f859813f26c5",
                            Description = "Pode atualizar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroDelete",
                            NormalizedName = "CANCHAVEAPITERCEIRODELETE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "3cd432b7-f5f6-4640-add8-f4f177d418d8",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "dae0c7ff-f423-47f4-b72b-bb7a74c5c6f8",
                            Description = "Pode realizar todas as ações/operações em dashboard publica",
                            Name = "CanDashboardPublicaAll",
                            NormalizedName = "CANDASHBOARDPUBLICAALL",
                            Subject = "ac-dashboardPublica-page"
                        },
                        new
                        {
                            Id = "89e09474-9c12-4b79-9afa-6e1e617542d0",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "914905ec-198d-44b7-bea0-ed4dbb87a3b4",
                            Description = "CanDashboardPublicaClienteContratoList",
                            Name = "CanDashboardPublicaClienteContratoList",
                            NormalizedName = "CANDASHBOARDPUBLICACLIENTECONTRATOLIST",
                            Subject = "ac-dashboardPublicaClienteContrato-page"
                        },
                        new
                        {
                            Id = "71a80ffd-8fe3-4b7c-92d0-ebd4107a78d0",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "f3e340ea-9fe4-47c2-8613-d84e669a656d",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de fornecedores",
                            Name = "CanVendedorAll",
                            NormalizedName = "CANVENDEDORALL",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "9e533aca-e8f4-4035-bf16-f542c0c0d286",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "83aaf770-b671-41f4-86d0-b39e4ea4ebf9",
                            Description = "Pode listar os dados de todos os produtos de fornecedores",
                            Name = "CanVendedorList",
                            NormalizedName = "CANVENDEDORLIST",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "1cf11ebd-ab73-4dc9-8a42-c8cd46f3ab53",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "13e6ab4b-1861-4d42-a90b-69fdd9fd949f",
                            Description = "Pode listar os dados de um produto de fornecedor",
                            Name = "CanVendedorRead",
                            NormalizedName = "CANVENDEDORREAD",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "679f3053-7b51-4271-a83e-cedebf225caf",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "356a9e4f-11d5-4989-898f-8e889238f3cc",
                            Description = "Pode visualizar um produto de fornecedor",
                            Name = "CanVendedorCreate",
                            NormalizedName = "CANVENDEDORCREATE",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "436c218c-c408-4aaf-ba19-5e5f2248ed59",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "3af460b7-c558-49dc-8279-375c15e79f42",
                            Description = "Pode criar um produto de fornecedor",
                            Name = "CanVendedorUpdate",
                            NormalizedName = "CANVENDEDORUPDATE",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "3055b642-ef41-40f3-802d-7bc0c9fd67fa",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "17f8a4c1-b510-472a-ba9c-b09f3fd5b25c",
                            Description = "Pode deletar um produto de fornecedor",
                            Name = "CanVendedorDelete",
                            NormalizedName = "CANVENDEDORDELETE",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "c11a6ca8-6624-40a4-b093-375910ccf50c",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "a0feb753-1011-4c30-86dd-093a8e5a764f",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de fornecedores",
                            Name = "CanVendedorComissaoAll",
                            NormalizedName = "CANVENDEDORCOMISSAOALL",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "f6ec666d-6de4-4568-acf2-004e1070f445",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "ccbbba49-4c63-4044-bc4a-bb22b4a01de4",
                            Description = "Pode listar os dados de todos os produtos de fornecedores",
                            Name = "CanVendedorComissaoList",
                            NormalizedName = "CANVENDEDORCOMISSAOLIST",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "e808138e-f049-4515-82ea-a5b215dcd6c5",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "1280e976-88f3-4fb9-9e89-b1bf57a87ada",
                            Description = "Pode listar os dados de um produto de fornecedor",
                            Name = "CanVendedorComissaoRead",
                            NormalizedName = "CANVENDEDORCOMISSAOREAD",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "538f0bfc-5a35-4a02-80c2-e2274f99e056",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "05394ed1-b92e-4063-8293-bfc9eaa7e102",
                            Description = "Pode visualizar um produto de fornecedor",
                            Name = "CanVendedorComissaoCreate",
                            NormalizedName = "CANVENDEDORCOMISSAOCREATE",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "f5961b08-58d4-4fd3-bcaf-8f94fc8df18b",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "bf34bfb7-55c0-4a73-b58a-28d929720090",
                            Description = "Pode criar um produto de fornecedor",
                            Name = "CanVendedorComissaoUpdate",
                            NormalizedName = "CANVENDEDORCOMISSAOUPDATE",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "da366783-178e-44ae-a01c-0f786a775ba0",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "5ffabe6b-0983-45f7-b1bb-246f8767d437",
                            Description = "Pode deletar um produto de fornecedor",
                            Name = "CanVendedorComissaoDelete",
                            NormalizedName = "CANVENDEDORCOMISSAODELETE",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "fd22e0f8-2e3b-4e2c-ae61-de6082d71ce2",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "a848f886-0993-436f-9adb-53a4cdd4b5c1",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de fornecedores",
                            Name = "CanVendedorContratoAll",
                            NormalizedName = "CANVENDEDORCONTRATOALL",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "eecaa02d-ad11-4cf2-b8ed-254953536db9",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "77de52dc-2116-435b-ba2b-61c2870abcbf",
                            Description = "Pode listar os dados de todos os produtos de fornecedores",
                            Name = "CanVendedorContratoList",
                            NormalizedName = "CANVENDEDORCONTRATOLIST",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "b5579cf2-7eaf-4cc2-bbd3-f389e325a9d9",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "1b705217-85a7-4053-8ae5-9fb9f29cbed6",
                            Description = "Pode listar os dados de um produto de fornecedor",
                            Name = "CanVendedorContratoRead",
                            NormalizedName = "CANVENDEDORCONTRATOREAD",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "8adaf54a-d9ad-4af4-a169-778f3c484045",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "e6456e75-c489-4aee-8aa4-68f8a35c95cf",
                            Description = "Pode visualizar um produto de fornecedor",
                            Name = "CanVendedorContratoCreate",
                            NormalizedName = "CANVENDEDORCONTRATOCREATE",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "7f025be3-f026-4917-b439-3f4ada90459c",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "77911cf4-d10b-4ab8-a804-26346d17daae",
                            Description = "Pode criar um produto de fornecedor",
                            Name = "CanVendedorContratoUpdate",
                            NormalizedName = "CANVENDEDORCONTRATOUPDATE",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "e74ad7c7-d248-40bb-ac67-735ae887896f",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "a9c75180-3cbc-40c2-b13a-aad23e6fb967",
                            Description = "Pode deletar um produto de fornecedor",
                            Name = "CanVendedorContratoDelete",
                            NormalizedName = "CANVENDEDORCONTRATODELETE",
                            Subject = "ac-vendedorContrato-page"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetRoleGroups", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataAniversario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Funcao")
                        .HasColumnType("integer");

                    b.Property<int>("Genero")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TelefoneCelular")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasDefaultValue(99999999999L);

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "ca431822-360a-4ee6-b978-66564d429fc7",
                            DataAniversario = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alan.rezende@boxtecnologia.com.br",
                            EmailConfirmed = true,
                            FullName = "ALAN LEITE DE REZENDE",
                            Funcao = 0,
                            Genero = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAN.REZENDE@BOXTECNOLOGIA.COM.BR",
                            NormalizedUserName = "ALAN.REZENDE@BOXTECNOLOGIA.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGbgHKOKiDDs5fvXN8kHviorntHToMKurnVJNmsFQNInxhQOyZTwJ2w0SpbyCdZbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9514850-61dd-4cc1-b909-88b79b035643",
                            Setor = 0,
                            Status = 0,
                            TelefoneCelular = 0L,
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            TwoFactorEnabled = false,
                            UserName = "alan.rezende@boxtecnologia.com.br"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetUserGroups", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "b3a5b61d-7ff4-43cb-bad4-a945b150fc72"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ChaveApiTerceiro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("ApiTerceiro")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataValidade")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChavesApiTerceiro", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c648d46-3158-486c-87bf-fadc3501e86e"),
                            ApiTerceiro = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataValidade = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Cep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("20");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("50");

                    b.Property<string>("Cpf")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DataFundacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("5");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("500");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int?>("TipoPessoa")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<long?>("BomControleContratoId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Periodicidade")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorContrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,5)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClienteContratos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ClienteProdutos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<int>("CobrancaTipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ServicoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ServicoId");

                    b.ToTable("ClienteServicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Fornecedores", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<string>("CodigoProduto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorProdutos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<string>("CodigoServico")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorServicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("Pipelines", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineAssinante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.HasIndex("UserId");

                    b.ToTable("PipelineAssinantes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AlertaEstagnacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineEtapas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataConclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineEtapaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineEtapaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaAnexos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Titulo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaApontamentos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamentoAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaApontamentoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaApontamentoId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaApontamentoAnexos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAssinante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("UserId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaAssinantes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaTag", b =>
                {
                    b.Property<Guid>("TarefaTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("TarefaTagId", "PipelineTarefaId");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("TarefaTagId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaTags", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("CodigoUnico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("FornecedorProdutoId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCusto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodigoUnico")
                        .IsUnique();

                    b.HasIndex("FornecedorProdutoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("CodigoUnico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorServicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCusto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodigoUnico")
                        .IsUnique();

                    b.HasIndex("FornecedorServicoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Servicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("TarefaTags", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeExibicao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppPrincipal")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            ApiKey = new Guid("57d390e7-2b87-47fe-9bc8-0bae3a388499"),
                            Cnpj = "12.368.943/0001-50",
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 12, 15, 11, 45, 27, 481, DateTimeKind.Unspecified).AddTicks(9481), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            EmailPrincipal = "rafale@boxtecnologia.com.br",
                            IsDeleted = false,
                            Nome = "Box Tecnologia Ltda",
                            NomeExibicao = "Box Tecnologia",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 12, 15, 11, 45, 27, 481, DateTimeKind.Unspecified).AddTicks(9510), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("ComissaoPercentual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<decimal>("ComissaoReais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Vendedores", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorComissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ClienteContratoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorComissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VendedorId");

                    b.ToTable("VendedoresComissoes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorContrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ClienteContratoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClienteContratoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("VendedoresContratos", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationGroups")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany("ApplicationUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Clientes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteContratos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteProduto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteProdutos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Produto", "Produto")
                        .WithMany("ClienteProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteServico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteServicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Servico", "Servico")
                        .WithMany("ClienteServicos")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Fornecedores")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorProdutos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorServicos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Pipelines")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineAssinante", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineAssinantes")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PipelineAssinantes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineEtapas")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineEtapa", "PipelineEtapa")
                        .WithMany("PipelineTarefas")
                        .HasForeignKey("PipelineEtapaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineEtapa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAnexo", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaAnexos")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaApontamentos")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamentoAnexo", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefaApontamento", "PipelineTarefaApontamento")
                        .WithMany("PipelineTarefaApontamentoAnexos")
                        .HasForeignKey("PipelineTarefaApontamentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefaApontamento");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAssinante", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaAssinantes")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PipelineTarefaAssinantes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaTag", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaTags")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.TarefaTag", "TarefaTag")
                        .WithMany("PipelineTarefaTags")
                        .HasForeignKey("TarefaTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");

                    b.Navigation("TarefaTag");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.FornecedorProduto", "FornecedorProduto")
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FornecedorProduto");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.FornecedorServico", "FornecedorServico")
                        .WithMany("Servicos")
                        .HasForeignKey("FornecedorServicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Servicos")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FornecedorServico");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Vendedor", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Vendedor")
                        .HasForeignKey("BoxBack.Domain.Models.Vendedor", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorComissao", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ClienteContrato", "ClienteContrato")
                        .WithMany("VendedoresComissoes")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Vendedor", "Vendedor")
                        .WithMany("VendedorComissoes")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClienteContrato");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorContrato", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ClienteContrato", "ClienteContrato")
                        .WithMany("VendedoresContratos")
                        .HasForeignKey("ClienteContratoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Vendedor", "Vendedor")
                        .WithMany("VendedorContratos")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClienteContrato");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserGroups");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserClaims");

                    b.Navigation("ApplicationUserGroups");

                    b.Navigation("ApplicationUserRoles");

                    b.Navigation("PipelineAssinantes");

                    b.Navigation("PipelineTarefaAssinantes");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Navigation("ClienteContratos");

                    b.Navigation("ClienteProdutos");

                    b.Navigation("ClienteServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.Navigation("VendedoresComissoes");

                    b.Navigation("VendedoresContratos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.Navigation("FornecedorProdutos");

                    b.Navigation("FornecedorServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.Navigation("PipelineAssinantes");

                    b.Navigation("PipelineEtapas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.Navigation("PipelineTarefas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.Navigation("PipelineTarefaAnexos");

                    b.Navigation("PipelineTarefaApontamentos");

                    b.Navigation("PipelineTarefaAssinantes");

                    b.Navigation("PipelineTarefaTags");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.Navigation("PipelineTarefaApontamentoAnexos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.Navigation("ClienteProdutos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.Navigation("ClienteServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.Navigation("PipelineTarefaTags");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Navigation("ApplicationGroups");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Clientes");

                    b.Navigation("Fornecedores");

                    b.Navigation("Pipelines");

                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Vendedor", b =>
                {
                    b.Navigation("VendedorComissoes");

                    b.Navigation("VendedorContratos");
                });
#pragma warning restore 612, 618
        }
    }
}
