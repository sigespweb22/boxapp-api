// <auto-generated />
using System;
using BoxBack.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoxBack.Infra.Data.Migrations
{
    [DbContext(typeof(BoxAppDbContext))]
    [Migration("20230110133611_v1.70")]
    partial class v170
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("OrderNumbers");

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 561, DateTimeKind.Unspecified).AddTicks(5614), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            IsDeleted = false,
                            Name = "Master",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UniqueKey = "ors0eAr4DPkvrwhy5gVnQAqRDnJUO43j9HzbkPyZ/7Q=",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 561, DateTimeKind.Unspecified).AddTicks(5635), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int[]>("Actions")
                        .HasColumnType("integer[]");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            Actions = new[] { 0 },
                            ConcurrencyStamp = "4629cea3-3b65-43b9-9c4e-7cc68fe4e4e4",
                            Description = "Pode realizar todas as ações/operações, bem como ter acesso a todos os dados e funcionalidades",
                            Name = "Master",
                            NormalizedName = "MASTER",
                            Subject = "all"
                        },
                        new
                        {
                            Id = "831461a1-55e4-4f69-87d0-681b951bde81",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "8259820c-1bd7-4507-abd3-c3c3bd9815c9",
                            Description = "Pode realizar todas as ações/operações em todas as dashboards",
                            Name = "CanDashboardAll",
                            NormalizedName = "CANDASHBOARDALL",
                            Subject = "ac-dashboard-page"
                        },
                        new
                        {
                            Id = "549be678-153e-42fb-9103-6f396e4e7eae",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "0b6bcf38-11b5-4428-ac23-4d8905076973",
                            Description = "Pode visualizar todas as dashboards do cliente",
                            Name = "CanDashboardClienteAll",
                            NormalizedName = "CANDASHBOARDCLIENTEALL",
                            Subject = "ac-dashboardCliente-page"
                        },
                        new
                        {
                            Id = "12921c54-9377-414c-a3cd-63fded1ba8ff",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "e9cde316-f7a5-40c5-970d-28f55ce8cb90",
                            Description = "Pode visualizar todas as dashboards de controle de acesso",
                            Name = "CanDashboardControleAcessoAll",
                            NormalizedName = "CANDASHBOARDCONTROLEACESSOALL",
                            Subject = "ac-dashboardControleAcesso-page"
                        },
                        new
                        {
                            Id = "c1c253ae-6ef6-478d-8b4d-e86a992c3a0f",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "3ac621e1-4799-4e57-980d-0c05291b9088",
                            Description = "Pode realizar todas as ações/operações em todos os usuários",
                            Name = "CanUserAll",
                            NormalizedName = "CANUSERALL",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "09cb6229-0b17-4d35-b0c2-7e5b84e3709e",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "dc4e32a2-64a5-419c-b9bc-ad3f5fbf0f28",
                            Description = "Pode listar os dados de todos os usuários",
                            Name = "CanUserList",
                            NormalizedName = "CANUSERLIST",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "5aae85df-2881-485d-9876-e5b7f5ae8a0f",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "f02cc7bd-41de-42de-81bb-db381c73eb2f",
                            Description = "Pode listar os dados de um usuários",
                            Name = "CanUserRead",
                            NormalizedName = "CANUSERREAD",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "c870105c-f39e-46e1-9976-c2f68aa87b8d",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "ac5b02ac-cdac-4fa2-be52-c66d0b6f4acb",
                            Description = "Pode criar um usuário",
                            Name = "CanUserCreate",
                            NormalizedName = "CANUSERCREATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "59e15532-7c05-4ae0-a6e7-1cb22714061a",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "b44632ae-8aa9-48c7-ae09-3d929fea9806",
                            Description = "Pode atualizar os dados de um usuário",
                            Name = "CanUserUpdate",
                            NormalizedName = "CANUSERUPDATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "e10eb0d2-5927-4fa9-997a-6426d9028545",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "457168b0-514d-4c9d-85bf-a4c0c374a602",
                            Description = "Pode deletar um usuário",
                            Name = "CanUserDelete",
                            NormalizedName = "CANUSERDELETE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "6bb0f31e-add6-4858-b353-b2e08b5e0191",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "12db6724-8263-4d27-b64c-06cc21d73d9b",
                            Description = "Pode realizar todas as ações/operações em todos as roles/permissões",
                            Name = "CanRoleAll",
                            NormalizedName = "CANROLEALL",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "27515bb1-8859-45ec-bff0-f5b720899120",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "d2123083-2360-4d62-b26a-082000df8491",
                            Description = "Pode listar os dados de todas as roles/permissões",
                            Name = "CanRoleList",
                            NormalizedName = "CANROLELIST",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "9a9c04e8-2090-4046-bd98-c28106154284",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "d2cd3dbd-b3f4-4840-a5db-b581a7d17945",
                            Description = "Pode listar os dados de uma roles/permissão",
                            Name = "CanRoleRead",
                            NormalizedName = "CANROLEREAD",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "c2275201-4c14-4d57-8fb8-6b6d31eb9191",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "b461b227-5884-4ae4-8807-01cf45a80c8a",
                            Description = "Pode criar uma role/permissão",
                            Name = "CanRoleCreate",
                            NormalizedName = "CANROLECREATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "fddd75aa-c3a4-4c6b-b49e-112d68b8f7fb",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "8a60efa9-7c0e-4dc1-bcdc-f160c74840d5",
                            Description = "Pode atualizar os dados de uma roles/permissão",
                            Name = "CanRoleUpdate",
                            NormalizedName = "CANROLEUPDATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "c3498081-4970-4188-b450-c677a9a7d925",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "a27054ae-9a79-4069-aef7-6aaf234c06ae",
                            Description = "Pode deletar uma role/permissão",
                            Name = "CanRoleDelete",
                            NormalizedName = "CANROLEDELETE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "741ddda0-1e90-4ac4-9eaa-59d2dd5a04f8",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "3d751a1e-7361-491a-95c0-1b8f54820055",
                            Description = "Pode realizar todas as ações/operações em todos os grupos",
                            Name = "CanGroupAll",
                            NormalizedName = "CANGROUPALL",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "62187551-3af5-4cc1-9002-a13c4242586b",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "2d9cd9df-31b8-449d-995f-ce297b210c26",
                            Description = "Pode listar os dados de todos os grupos",
                            Name = "CanGroupList",
                            NormalizedName = "CANGROUPLIST",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "95edd683-1c16-45d8-b226-80a487caffd9",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "bc49f0b1-bf30-466a-ba8a-ebb592b6b8e7",
                            Description = "Pode listar os dado de um grupo",
                            Name = "CanGroupRead",
                            NormalizedName = "CANGROUPREAD",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "0b613694-3a6b-4745-8ba3-12ca6e44d795",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "7632ad97-6c2c-4621-bb93-537a158ef877",
                            Description = "Pode criar um grupo",
                            Name = "CanGroupCreate",
                            NormalizedName = "CANGROUPCREATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "b0d4e07c-cc98-49b9-8c4a-6ffdc5a7a5f1",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "e7832481-b910-41d0-a045-45bc75b3bca8",
                            Description = "Pode atualizar os dados de um grupo",
                            Name = "CanGroupUpdate",
                            NormalizedName = "CANGROUPUPDATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "b54ec839-cc72-41fb-ab7e-b1d2c5f2aed6",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "1494b7ca-b73c-49c7-80b9-d4bf5c02b668",
                            Description = "Pode deletar um grupo",
                            Name = "CanGroupDelete",
                            NormalizedName = "CANGROUPDELETE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "462b26db-5ebc-4911-ac4f-5884958e14db",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "53ad975b-f70c-4a6b-9099-5fdde126847d",
                            Description = "Pode visualizar todos os indicadores da dashboard comercial",
                            Name = "CanClienteAll",
                            NormalizedName = "CANCLIENTEALL",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "845ab5c9-db70-4ec6-829a-60c0bd9da673",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "ab48a999-6cc3-4e10-8b02-329fe547889e",
                            Description = "Pode listar os dados de todos os clientes",
                            Name = "CanClienteList",
                            NormalizedName = "CANCLIENTELIST",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "88b4886a-7241-415d-86d9-101430589b1f",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "afc478a6-bb95-453f-b3c6-2ad4e05ca26c",
                            Description = "Pode listar os dado de um cliente",
                            Name = "CanClienteRead",
                            NormalizedName = "CANCLIENTEREAD",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "6dd5eea1-5265-4970-befa-856dda3923af",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "767a364c-0a58-4f98-a1fc-dca4dae10d5b",
                            Description = "Pode criar um cliente",
                            Name = "CanClienteCreate",
                            NormalizedName = "CANCLIENTECREATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "9c38d1ec-3571-47d5-9cff-7b6036557cbb",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "17fe956c-18eb-4984-b302-dfa13549d088",
                            Description = "Pode atualizar os dados de um cliente",
                            Name = "CanClienteUpdate",
                            NormalizedName = "CANCLIENTEUPDATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "b766a27c-38cc-427d-b362-6d6065c88d61",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "65379852-ff16-4fc2-9a87-1430f94aba10",
                            Description = "Pode deletar um cliente",
                            Name = "CanClienteDelete",
                            NormalizedName = "CANCLIENTEDELETE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "797bfcb8-934e-4678-b964-7c702405b6d1",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "21903654-75e8-4987-a09f-835cfe573518",
                            Description = "Pode listar o título do sistema",
                            Name = "CanTitleSystemList",
                            NormalizedName = "CANTITLESYSTEMLIST",
                            Subject = "ac-titleSystem-page"
                        },
                        new
                        {
                            Id = "38559c9d-1940-49b4-b971-8d81f02050d4",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "2845d616-1c25-4e4b-8524-43e88d44ad49",
                            Description = "Pode listar o título dos negócios",
                            Name = "CanTitleBussinesList",
                            NormalizedName = "CANTITLEBUSSINESLIST",
                            Subject = "ac-titleBussines-page"
                        },
                        new
                        {
                            Id = "3d1eb79b-d093-492d-bd68-e78752f33955",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "f3f3ee29-1722-4451-bea4-3d45dea34d5a",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de clientes",
                            Name = "CanClienteServicoAll",
                            NormalizedName = "CANCLIENTESERVICOALL",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "c8063f08-11d4-4f02-8ede-3699f4de93bf",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "3d1affe7-0840-461a-a648-e98147977c34",
                            Description = "Pode listar os dados de todos os serviços de clientes",
                            Name = "CanClienteServicoList",
                            NormalizedName = "CANCLIENTESERVICOLIST",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "ff0ae58e-0eea-454f-889e-df3d6a4344b2",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "286131a0-4aaa-42e1-b3aa-cff4b7f26e92",
                            Description = "Pode listar os dado de um serviço de cliente",
                            Name = "CanClienteServicoRead",
                            NormalizedName = "CANCLIENTESERVICOREAD",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "18d327c0-0f55-4721-998e-dbf255e62b2c",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "6b1ce555-d465-4c30-816a-44a65e505653",
                            Description = "Pode criar um serviço para um cliente",
                            Name = "CanClienteServicoCreate",
                            NormalizedName = "CANCLIENTESERVICOCREATE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "d0327e88-40ce-489a-8b3a-6d92d43be58b",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "80104b31-0cd9-46f3-8213-e021b2e5a03a",
                            Description = "Pode atualizar um serviço de um cliente",
                            Name = "CanClienteServicoUpdate",
                            NormalizedName = "CANCLIENTESERVICOUPDATE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "7fbae422-7f18-4767-87d8-9a12cf9efcca",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "913ddc4b-a611-4bf3-8171-228d4c922c80",
                            Description = "Pode deletar um serviço de um cliente",
                            Name = "CanClienteServicoDelete",
                            NormalizedName = "CANCLIENTESERVICODELETE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "a8b7ada7-a2f6-4515-b370-eaaed6126c5c",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "da0230dc-e93e-4178-a80b-575a9612a08e",
                            Description = "Pode realizar todas as ações/operações em todos os serviços",
                            Name = "CanServicoAll",
                            NormalizedName = "CANSERVICOALL",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "47b8c402-4c9f-41fe-9fdb-362767d0dc34",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "e5346b64-d2bf-482c-92bb-f78a7070ccd4",
                            Description = "Pode listar os dados de todos os serviços",
                            Name = "CanServicoList",
                            NormalizedName = "CANSERVICOLIST",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "721d8d5c-65f2-46c0-abd5-f947a2556cfe",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "f3581157-a7a1-45a9-a8b5-6d3f6ad8d13e",
                            Description = "Pode listar os dados de um serviço",
                            Name = "CanServicoRead",
                            NormalizedName = "CANSERVICOREAD",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "fa84da26-ca5d-4090-8ecb-65a4ffe5615a",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "cbbc1155-dae6-4af0-bd27-cf6ce09c8115",
                            Description = "Pode atualizar um serviço",
                            Name = "CanServicoUpdate",
                            NormalizedName = "CANSERVICOUPDATE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "be90eb40-b5bc-49b7-9efa-6f7a7c5474a5",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "6b49ee1a-26d1-40df-82c1-524bae02a5f2",
                            Description = "Pode criar um serviço",
                            Name = "CanServicoCreate",
                            NormalizedName = "CANSERVICOCREATE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "2340c662-1415-488b-a93b-86c46e2c8ea5",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "dcc09cae-6581-44ce-b0e5-c9108c2ec688",
                            Description = "Pode deletar um serviço",
                            Name = "CanServicoDelete",
                            NormalizedName = "CANSERVICODELETE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "bf5b9737-745b-4850-ba67-fec4ab871beb",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "e151b0f4-af53-43c8-a7ec-6473234a793a",
                            Description = "Pode realizar todas as ações/operações em todos os pipelines",
                            Name = "CanPipelineAll",
                            NormalizedName = "CANPIPELINEALL",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "4df889ed-714c-43ed-9913-c945890cb436",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "4fc3ed68-fe4b-4869-95e3-aad1d74384f1",
                            Description = "Pode listar os dados de todos os pipelines",
                            Name = "CanPipelineList",
                            NormalizedName = "CANPIPELINELIST",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "ae279a5a-e1a1-402c-a70e-b083006441a0",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "2af88ab8-e50f-44f4-88f4-18ab5f1ca6c1",
                            Description = "Pode listar os dados de um pipeline",
                            Name = "CanPipelineRead",
                            NormalizedName = "CANPIPELINEREAD",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "706a293e-74d0-4bbb-8eac-f6a9c77d84a1",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "a76daad0-c76f-4669-8873-e46a4b490589",
                            Description = "Pode criar um pipeline",
                            Name = "CanPipelineCreate",
                            NormalizedName = "CANPIPELINECREATE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "3d0aa563-7e00-4379-84f2-3b1782c3d9e9",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "9436fd10-21a8-464e-9ba5-4121ea4d8da3",
                            Description = "Pode atualizar um pipeline",
                            Name = "CanPipelineUpdate",
                            NormalizedName = "CANPIPELINEUPDATE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "dd4e9a50-fe2f-47d1-b396-6b85b56acbe9",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "642dc923-e328-4b42-80a9-12ebd251ae51",
                            Description = "Pode deletar um pipeline",
                            Name = "CanPipelineDelete",
                            NormalizedName = "CANPIPELINEDELETE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "2d08b7cb-9661-4cba-95f5-c2c45d985367",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "5003e799-e044-4dac-ba1c-6c0c0610c68b",
                            Description = "Pode realizar todas as ações/operações em todos os fornecedores",
                            Name = "CanFornecedorAll",
                            NormalizedName = "CANFORNECEDORALL",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "93a5482f-def7-45bb-978f-97beece9bf9e",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "c10a34a7-84de-4887-b3a1-8d3ff7d2e4a1",
                            Description = "Pode listar os dados de todos os fornecedores",
                            Name = "CanFornecedorList",
                            NormalizedName = "CANFORNECEDORLIST",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "e643891d-aac1-434e-b774-107971969894",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "f7670e12-bcff-45be-817e-70eea1888958",
                            Description = "Pode listar os dados de um fornecedor",
                            Name = "CanFornecedorRead",
                            NormalizedName = "CANFORNECEDORREAD",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "34dbeb4c-0aba-4db8-ae69-cb286262fc78",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "5721b417-4771-4aa3-bd41-40475076bebe",
                            Description = "Pode criar um fornecedor",
                            Name = "CanFornecedorCreate",
                            NormalizedName = "CANFORNECEDORCREATE",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "e7b4911f-6de6-4123-af16-897327dea19a",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "02ca6748-35d1-49bf-863b-b575e020d0f6",
                            Description = "Pode atualizar um fornecedor",
                            Name = "CanFornecedorUpdate",
                            NormalizedName = "CANFORNECEDORUPDATE",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "6f1b4934-4cd5-476b-927d-16d2dfc5c0e4",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "d68ca350-ecc9-42f9-9cb4-d167276a4b33",
                            Description = "Pode deletar um fornecedor",
                            Name = "CanForncedorDelete",
                            NormalizedName = "CANFORNCEDORDELETE",
                            Subject = "ac-forncedor-page"
                        },
                        new
                        {
                            Id = "de6ebcd3-b82d-417d-94b8-2a1872c8565b",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "66032801-3a6c-40eb-b1ea-a1ba915f854d",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de fornecedores",
                            Name = "CanFornecedorServicoAll",
                            NormalizedName = "CANFORNECEDORSERVICOALL",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "2e7b1103-5d32-4b61-9f63-3d12886ef581",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "0223452c-f3f8-4337-a1ec-10e8f481fecd",
                            Description = "Pode listar os dados de todos os serviços de fornecedores",
                            Name = "CanFornecedorServicoList",
                            NormalizedName = "CANFORNECEDORSERVICOLIST",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "e8795a2f-4bd6-4cda-bc2b-cde680163e11",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "f3294d4b-8c58-4e78-b4ad-914c5e98e021",
                            Description = "Pode listar os dado de um serviço de fornecedor",
                            Name = "CanFornecedorServicoRead",
                            NormalizedName = "CANFORNECEDORSERVICOREAD",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "f53bc631-425f-47b7-ab25-bfecfba0bc07",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "fe7eb433-3424-4110-847e-c306d33579ed",
                            Description = "Pode criar um serviço para um fornecedor",
                            Name = "CanFornecedorServicoCreate",
                            NormalizedName = "CANFORNECEDORSERVICOCREATE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "82958bb1-5d1a-49d8-a0f4-984fb10b3831",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "983f2e77-4db6-4d8d-968b-6b4320a3201c",
                            Description = "Pode atualizar um serviço de um fornecedor",
                            Name = "CanFornecedorServicoUpdate",
                            NormalizedName = "CANFORNECEDORSERVICOUPDATE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "a1e7d4ea-a5a2-4041-adde-55da5365ae7d",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "39119a08-2624-4bc7-b05a-87e50fc44c9c",
                            Description = "Pode deletar um serviço de um fornecedor",
                            Name = "CanFornecedorServicoDelete",
                            NormalizedName = "CANFORNECEDORSERVICODELETE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "fcd5fb59-6b75-40d2-882e-9398dc95ab52",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "c1d66168-588c-4b8c-944e-25eb9956a1f7",
                            Description = "Pode realizar todas as ações/operações em todos os produtos",
                            Name = "CanProdutoAll",
                            NormalizedName = "CANPRODUTOALL",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "7f29b6e8-1eaf-43cb-ab5b-a3eba5d3557c",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "ff354f06-3203-47d2-b6f5-3823f049f09e",
                            Description = "Pode listar os dados de todos os produtos",
                            Name = "CanProdutoList",
                            NormalizedName = "CANPRODUTOLIST",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "299c5297-49d0-4a72-8896-cfb9c9fc2b8d",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "0cf9dd7d-fa1d-48ce-ba7f-629f36c0425b",
                            Description = "Pode listar os dados de um produtos",
                            Name = "CanProdutoRead",
                            NormalizedName = "CANPRODUTOREAD",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "63e871d6-254a-4077-8e26-0c8778ecfd60",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "ddb16e22-721a-45e0-ade5-3fbfcb5e9fd8",
                            Description = "Pode criar um produtos",
                            Name = "CanProdutoCreate",
                            NormalizedName = "CANPRODUTOCREATE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "a2dd0f14-3392-44dc-95db-6122690cadf9",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "572253fa-bc50-4bc7-a5dc-7c9035463858",
                            Description = "Pode atualizar um produtos",
                            Name = "CanProdutoUpdate",
                            NormalizedName = "CANPRODUTOUPDATE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "483f8ae9-9f2a-4a0a-b5ce-b94fd15d79ac",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "40faa1b0-8999-4106-9811-2acdf84fa87a",
                            Description = "Pode deletar um produtos",
                            Name = "CanProdutoDelete",
                            NormalizedName = "CANPRODUTODELETE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "ea54795d-db56-4294-bfc7-d1f7fa3d0c1c",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "5a4de820-7183-4ad0-a778-229e16e5f641",
                            Description = "Pode realizar todas as ações/operações em todos os contratos de clientes",
                            Name = "CanClienteContratoAll",
                            NormalizedName = "CANCLIENTECONTRATOALL",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "a9d40957-dd6f-46ef-bcaf-b18854dda069",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "8deba770-8ee0-4ac6-b638-0cefd1d7a37e",
                            Description = "Pode listar os dados de todos os contratos de clientes",
                            Name = "CanClienteContratoList",
                            NormalizedName = "CANCLIENTECONTRATOLIST",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "db356a21-b197-450d-9350-612b3f87ce3e",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "2e27296c-4f59-49ff-94fe-238b10596fe7",
                            Description = "Pode listar os dados de um contrato de cliente",
                            Name = "CanClienteContratoRead",
                            NormalizedName = "CANCLIENTECONTRATOREAD",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "511abf04-0b4f-445a-9dd0-f1df75ca21c9",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "6c29b599-1cf2-4d49-afa9-74b98330b172",
                            Description = "Pode criar um contrato de cliente",
                            Name = "CanClienteContratoCreate",
                            NormalizedName = "CANCLIENTECONTRATOCREATE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "7e21a20f-75ee-4b4a-aa12-6de54c0903cc",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "5dd022a5-5243-4ad0-b396-cf2603327354",
                            Description = "Pode atualizar um contrato de cliente",
                            Name = "CanClienteContratoUpdate",
                            NormalizedName = "CANCLIENTECONTRATOUPDATE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "dee8fb21-95f4-451c-a48c-108e53f9d7ed",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "7fad5179-9694-4528-a69d-08dd3fa5d5a0",
                            Description = "Pode deletar um contrato de cliente",
                            Name = "CanClienteContratoDelete",
                            NormalizedName = "CANCLIENTECONTRATODELETE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "8e7ab5ab-1d6b-4f7e-9c69-dabe0e547ade",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "33b5a09a-7114-432a-94ac-603a4c4a50d2",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de clientes",
                            Name = "CanClienteProdutoAll",
                            NormalizedName = "CANCLIENTEPRODUTOALL",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "1ffe59da-7ad3-483b-b77a-9396c5417996",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "4fa7adb0-489b-461c-89b6-ba22f5731f8f",
                            Description = "Pode listar os dados de todos os produtos de clientes",
                            Name = "CanClienteProdutoList",
                            NormalizedName = "CANCLIENTEPRODUTOLIST",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "11eba5d3-47cd-4fd5-8215-733589ebbcbf",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "c10d2b04-64ad-49d1-9d6d-0cc94ccd58d7",
                            Description = "Pode listar os dados de um produto de cliente",
                            Name = "CanClienteProdutoRead",
                            NormalizedName = "CANCLIENTEPRODUTOREAD",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "b0f5b997-3bf8-435f-8b4d-b6ad652806c6",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "e42afc29-2570-4bdb-bb6f-78f8d9fe6503",
                            Description = "Pode criar um produto de cliente",
                            Name = "CanClienteProdutoCreate",
                            NormalizedName = "CANCLIENTEPRODUTOCREATE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "ef373b30-eda9-46c8-8e3d-4c11b30f99b3",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "1e5ee4f4-95df-473f-b8ad-4236dbcd590e",
                            Description = "Pode atualizar um produto de cliente",
                            Name = "CanClienteProdutoUpdate",
                            NormalizedName = "CANCLIENTEPRODUTOUPDATE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "d3d59b02-003b-40f7-a5c2-860f168ce483",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "e9ba3eac-8195-43e1-bf01-30dc828ccf83",
                            Description = "Pode deletar um produto de cliente",
                            Name = "CanClienteProdutoDelete",
                            NormalizedName = "CANCLIENTEPRODUTODELETE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "c23f0169-bfa4-4c19-8c93-e0ca43cc92f0",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "29a9a9e1-1d9e-4cf2-99bf-641844b69905",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de fornecedores",
                            Name = "CanFornecedorProdutoAll",
                            NormalizedName = "CANFORNECEDORPRODUTOALL",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "0300373e-0785-4003-99c8-f4e0c02136fe",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "4af61370-c4cc-4abe-ad2c-d942376dda1c",
                            Description = "Pode listar os dados de todos os produtos de fornecedores",
                            Name = "CanFornecedorProdutoList",
                            NormalizedName = "CANFORNECEDORPRODUTOLIST",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "1a3d2886-8810-483a-a369-8e2c1764955b",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "c93cf828-7058-4bc2-be17-8a9f0a11070c",
                            Description = "Pode listar os dados de um produto de fornecedor",
                            Name = "CanFornecedorProdutoRead",
                            NormalizedName = "CANFORNECEDORPRODUTOREAD",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "885d2942-0188-4e1d-9f76-31095952da9f",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "59e39c68-4739-456e-b162-0520dc21a9aa",
                            Description = "Pode visualizar um produto de fornecedor",
                            Name = "CanFornecedorProdutoCreate",
                            NormalizedName = "CANFORNECEDORPRODUTOCREATE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "a325a20e-91ad-43e7-8750-dce55f661453",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "62e77e44-0fd7-4e2a-9d36-26bcc0f6de00",
                            Description = "Pode criar um produto de fornecedor",
                            Name = "CanFornecedorProdutoUpdate",
                            NormalizedName = "CANFORNECEDORPRODUTOUPDATE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "367dd85c-746f-45f1-ba9d-cf3bbb44c743",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "e06c1eb8-49a4-40d3-a6b8-0c92be60683e",
                            Description = "Pode deletar um produto de fornecedor",
                            Name = "CanFornecedorProdutoDelete",
                            NormalizedName = "CANFORNECEDORPRODUTODELETE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "42ddf3d8-e43f-4e96-861a-c908493c38b7",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "6ae602e2-45ed-4cb4-a990-8af40b759dd1",
                            Description = "Pode realizar todas as ações/operações em dashboard comercial",
                            Name = "CanDashboardComercialAll",
                            NormalizedName = "CANDASHBOARDCOMERCIALALL",
                            Subject = "ac-dashboardComercial-page"
                        },
                        new
                        {
                            Id = "2ea85c59-ffee-4ec6-972e-5fa84f921773",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "a88621a4-4d85-4ee6-b154-799651aebc3a",
                            Description = "CanDashboardComercialClienteContratoList",
                            Name = "CanDashboardComercialClienteContratoList",
                            NormalizedName = "CANDASHBOARDCOMERCIALCLIENTECONTRATOLIST",
                            Subject = "ac-dashboardComercialClienteContrato-page"
                        },
                        new
                        {
                            Id = "0c13e769-94d0-4668-b10f-70c9d61bbe5b",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "513fba84-a520-44ae-ae2f-1d8508bc95b9",
                            Description = "Pode criar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroAll",
                            NormalizedName = "CANCHAVEAPITERCEIROALL",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "11aae703-ebc0-4e33-b300-b3fa4b28d08b",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "1933b410-0091-4cb4-929f-381d2bb32862",
                            Description = "Pode criar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroList",
                            NormalizedName = "CANCHAVEAPITERCEIROLIST",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "1ef75bff-49ff-4f01-81c1-6007c9ab1efb",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "005c06bc-3219-4c54-b5c8-7a48c5f72773",
                            Description = "Pode criar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroRead",
                            NormalizedName = "CANCHAVEAPITERCEIROREAD",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "a19ac33c-e003-4062-b3da-dc9feeef7f5b",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "aecd8129-eeca-48ce-bfdb-c9737eb7fcee",
                            Description = "Pode criar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroCreate",
                            NormalizedName = "CANCHAVEAPITERCEIROCREATE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "9c5ef886-055e-4474-a185-b210239bc0a8",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "8f9c232f-f72c-4cc5-a469-7fab085dd08c",
                            Description = "Pode criar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroUpdate",
                            NormalizedName = "CANCHAVEAPITERCEIROUPDATE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "1b38072c-b4bf-40a2-b1e4-fc0a21fe8b90",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "7c2f6903-f0ca-4a57-94da-e03d4cd891a1",
                            Description = "Pode criar uma chave de api de terceiro",
                            Name = "CanChaveApiTerceiroDelete",
                            NormalizedName = "CANCHAVEAPITERCEIRODELETE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "9d78bcf3-c70c-4fa3-9feb-0f2e7b6b9a16",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "2c69b85a-f909-4380-97dc-adb21a7bcb67",
                            Description = "Pode realizar todas as ações/operações em dashboard publica",
                            Name = "CanDashboardPublicaAll",
                            NormalizedName = "CANDASHBOARDPUBLICAALL",
                            Subject = "ac-dashboardPublica-page"
                        },
                        new
                        {
                            Id = "9104e6b5-b05a-478a-9137-a27a41556044",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "09536ca5-0dd9-44f2-9148-c54ca8bf8b1d",
                            Description = "CanDashboardPublicaClienteContratoList",
                            Name = "CanDashboardPublicaClienteContratoList",
                            NormalizedName = "CANDASHBOARDPUBLICACLIENTECONTRATOLIST",
                            Subject = "ac-dashboardPublicaClienteContrato-page"
                        },
                        new
                        {
                            Id = "8af0c203-735b-49bc-87da-3a7f66770d05",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "8b194213-2555-4a18-b9f3-906bb6a621ae",
                            Description = "Pode realizar todas as ações/operações em todos os vendedores",
                            Name = "CanVendedorAll",
                            NormalizedName = "CANVENDEDORALL",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "1d926534-cb8a-4e20-af45-971e77f1f32a",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "ed3ec03e-873c-4e99-a78d-89d9a75c1bcf",
                            Description = "Pode listar os dados de todos os vendedores",
                            Name = "CanVendedorList",
                            NormalizedName = "CANVENDEDORLIST",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "d2087cd7-2337-44c0-ba6c-09815030589d",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "0f2415d4-26e5-4afd-adf1-a5e48bd8922c",
                            Description = "Pode listar os dados de um vendedor",
                            Name = "CanVendedorRead",
                            NormalizedName = "CANVENDEDORREAD",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "d303a76f-21f2-4856-a6a3-25d2782848e1",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "d579518b-60b8-435b-8350-836eb99d1b9c",
                            Description = "Pode visualizar um vendedor",
                            Name = "CanVendedorCreate",
                            NormalizedName = "CANVENDEDORCREATE",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "209e5357-6957-4ecb-8f1e-be6ebf234c3d",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "f3d00c7b-825b-4001-803b-b3d571151312",
                            Description = "Pode criar um vendedor",
                            Name = "CanVendedorUpdate",
                            NormalizedName = "CANVENDEDORUPDATE",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "692eaef7-5566-40eb-935f-6902ec7c1d88",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "49c099e5-7b3a-4d7d-b339-96d46568145f",
                            Description = "Pode deletar um vendedor",
                            Name = "CanVendedorDelete",
                            NormalizedName = "CANVENDEDORDELETE",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "1e0a149d-c2a0-4d16-91f6-63ecfbf40b42",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "21409d66-2ab4-46b4-9e3f-0b9796b6e7e7",
                            Description = "Pode realizar todas as ações/operações em todas as comissões de vendedores",
                            Name = "CanVendedorComissaoAll",
                            NormalizedName = "CANVENDEDORCOMISSAOALL",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "fdba820a-44fb-4145-829d-ff492df14688",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "a5c479bd-b46d-4488-8063-cf0d15128011",
                            Description = "Pode listar os dados de comissão de vendedores",
                            Name = "CanVendedorComissaoList",
                            NormalizedName = "CANVENDEDORCOMISSAOLIST",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "10ea5f71-889e-4229-a873-1aefc6e612f1",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "dc454b9a-17af-45fb-9e6a-4ed138c1a9b5",
                            Description = "Pode listar os dados de uma comissão de vendedor",
                            Name = "CanVendedorComissaoRead",
                            NormalizedName = "CANVENDEDORCOMISSAOREAD",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "021e4e4a-c7dd-4148-8c4b-636d3aa9748b",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "4b1cfeef-dd47-4e1e-9a53-f8daa1106f7b",
                            Description = "Pode visualizar uma comissão de vendedor",
                            Name = "CanVendedorComissaoCreate",
                            NormalizedName = "CANVENDEDORCOMISSAOCREATE",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "c4b9c8f0-0cbf-46de-9e4a-6faaf33c0235",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "4fe959bb-eb53-4e48-844a-def284575a97",
                            Description = "Pode criar uma comissão de vendedor",
                            Name = "CanVendedorComissaoUpdate",
                            NormalizedName = "CANVENDEDORCOMISSAOUPDATE",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "66b5d88f-dd2f-4f82-9e78-9de49fda1777",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "fd37d8a7-ad11-4a45-b4a2-e454eb4db483",
                            Description = "Pode deletar uma comissão de vendedor",
                            Name = "CanVendedorComissaoDelete",
                            NormalizedName = "CANVENDEDORCOMISSAODELETE",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "6ba6f85d-0fac-4d0a-bb2e-e444c9d95c03",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "cb4d3057-464e-45fe-9a31-29ddbb37702f",
                            Description = "Pode realizar todas as ações/operações em todos os contratos vinculados a vendedores",
                            Name = "CanVendedorContratoAll",
                            NormalizedName = "CANVENDEDORCONTRATOALL",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "6b924891-e69f-4885-b6b9-bf0479c6cd92",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "36867eac-0231-422b-a5b4-2a24a48240cc",
                            Description = "Pode listar os dados de todos os contratos vinculados a vendedores",
                            Name = "CanVendedorContratoList",
                            NormalizedName = "CANVENDEDORCONTRATOLIST",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "765868b6-500d-4a4d-916d-06e75d3e867d",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "1d15b3e6-2281-4530-9369-8775415b560f",
                            Description = "Pode listar os dados de um contrato vinculado a um vendedor",
                            Name = "CanVendedorContratoRead",
                            NormalizedName = "CANVENDEDORCONTRATOREAD",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "3fdfb1bd-0b10-4f02-bd1b-48b8661ba4f5",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "e145ef81-ff9c-4da4-82f3-ff87d3cc4f71",
                            Description = "Pode visualizar um contrato vinculado a um ou vários vendedores",
                            Name = "CanVendedorContratoCreate",
                            NormalizedName = "CANVENDEDORCONTRATOCREATE",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "60ee7e52-6a73-46fb-9d13-d45934941a98",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "cc719227-8105-4641-8d8e-2e63544f6e31",
                            Description = "Pode criar um vínculo de contrato a um vendedor",
                            Name = "CanVendedorContratoUpdate",
                            NormalizedName = "CANVENDEDORCONTRATOUPDATE",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "973eb5fe-bb3c-48f8-9998-7db9a8043d29",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "874704ca-7cb0-479c-a232-4abb8a4bc1d7",
                            Description = "Pode deletar um vínculo de contrato com um vendedor",
                            Name = "CanVendedorContratoDelete",
                            NormalizedName = "CANVENDEDORCONTRATODELETE",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "bda070bd-be6f-48a2-8c17-152d75f2a38a",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "8c9ac46c-2dec-4a06-9018-0e3a363225b9",
                            Description = "Pode realizar todas as ações/operações em todas as faturas de contratos de clientes",
                            Name = "CanClienteContratoFaturaAll",
                            NormalizedName = "CANCLIENTECONTRATOFATURAALL",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "fc57f4f7-6a63-411e-bc93-d3fdc5a0a968",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "c10cc1b5-e872-4ce5-98b4-99546d524670",
                            Description = "Pode listar os dados de todas as faturas de contratos de clientes",
                            Name = "CanClienteContratoFaturaList",
                            NormalizedName = "CANCLIENTECONTRATOFATURALIST",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "f9a050ce-83f0-4948-9276-62a3ddeb7e4e",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "59415255-b14e-4996-8abb-9522d177f3aa",
                            Description = "Pode listar os dados de uma fatura de contrato de cliente",
                            Name = "CanClienteContratoFaturaRead",
                            NormalizedName = "CANCLIENTECONTRATOFATURAREAD",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "8204eda6-69ea-4894-90fb-9a9cb1b0703f",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "aaaa7395-5624-48e4-9d0f-676757d49ac8",
                            Description = "Pode visualizar uma fatura de contrato de cliente",
                            Name = "CanClienteContratoFaturaCreate",
                            NormalizedName = "CANCLIENTECONTRATOFATURACREATE",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "f683647e-a610-44e3-8e3d-4049940abb74",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "1905c32c-de1f-4f56-a482-7a37bc0ea3f1",
                            Description = "Pode criar uma fatura de contrato de cliente",
                            Name = "CanClienteContratoFaturaUpdate",
                            NormalizedName = "CANCLIENTECONTRATOFATURAUPDATE",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "c4884687-e5da-415c-8abe-c3bd8551ce04",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "4dd44927-5be5-456f-b5cc-dff0cd033c1e",
                            Description = "Pode deletar uma fatura de contrato de cliente",
                            Name = "CanClienteContratoFaturaDelete",
                            NormalizedName = "CANCLIENTECONTRATOFATURADELETE",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "97b3c6e9-18f4-4978-838b-14753a312c28",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "adc222e8-c1ba-4e16-9e1d-644bfa897dbf",
                            Description = "Pode realizar todas as ações/operações relacionadas a entidade de sistema rotina",
                            Name = "CanRotinaAll",
                            NormalizedName = "CANROTINAALL",
                            Subject = "ac-rotina-page"
                        },
                        new
                        {
                            Id = "223fcad6-8a25-4923-bee9-978e1826f5f5",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "d937349c-b1f4-48c7-a35b-e4f71bf2b770",
                            Description = "Pode listar todas as rotinas de sistema",
                            Name = "CanRotinaList",
                            NormalizedName = "CANROTINALIST",
                            Subject = "ac-rotina-page"
                        },
                        new
                        {
                            Id = "6fdf6364-ef41-46bd-80a2-4a81645c23e1",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "5f08109e-552e-4cc3-8b84-defd8d93f372",
                            Description = "Pode atualizar os dados de rotinas",
                            Name = "CanRotinaUpdate",
                            NormalizedName = "CANROTINAUPDATE",
                            Subject = "ac-rotina-page"
                        },
                        new
                        {
                            Id = "47a0327a-d42e-495f-a6ce-7401502ff190",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "6e919ba7-df27-479e-8c34-b825a5b0ca32",
                            Description = "Pode listar os dados de uma rotina",
                            Name = "CanRotinaRead",
                            NormalizedName = "CANROTINAREAD",
                            Subject = "ac-rotina-page"
                        },
                        new
                        {
                            Id = "9d780d8e-f52f-4181-a767-b2a328cd7663",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "eaddbee9-70bb-4a29-935c-37332e454fc2",
                            Description = "Pode realizar todas as ações/operações relacionadas a entidade rotina event history",
                            Name = "CanRotinaEventHistoryAll",
                            NormalizedName = "CANROTINAEVENTHISTORYALL",
                            Subject = "ac-rotinaEventHistory-page"
                        },
                        new
                        {
                            Id = "c0181ba5-cf55-4527-9106-8acffe0fbfef",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "1ac63440-f183-497a-a0f9-c092a10e95c9",
                            Description = "Pode listar todas as rotinas events histories",
                            Name = "CanRotinaEventHistoryList",
                            NormalizedName = "CANROTINAEVENTHISTORYLIST",
                            Subject = "ac-rotinaEventHistory-page"
                        },
                        new
                        {
                            Id = "8919d26a-93ed-4998-bcc0-780d7aec63c8",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "1ac9100d-ebe7-4869-b942-fc8948c7da35",
                            Description = "Pode listar os dados de uma rotina event history",
                            Name = "CanRotinaEventHistoryRead",
                            NormalizedName = "CANROTINAEVENTHISTORYREAD",
                            Subject = "ac-rotinaEventHistory-page"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetRoleGroups", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataAniversario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Funcao")
                        .HasColumnType("integer");

                    b.Property<int>("Genero")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TelefoneCelular")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasDefaultValue(99999999999L);

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "ca431822-360a-4ee6-b978-66564d429fc7",
                            DataAniversario = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alan.rezende@boxtecnologia.com.br",
                            EmailConfirmed = true,
                            FullName = "ALAN LEITE DE REZENDE",
                            Funcao = 0,
                            Genero = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAN.REZENDE@BOXTECNOLOGIA.COM.BR",
                            NormalizedUserName = "ALAN.REZENDE@BOXTECNOLOGIA.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGbgHKOKiDDs5fvXN8kHviorntHToMKurnVJNmsFQNInxhQOyZTwJ2w0SpbyCdZbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9514850-61dd-4cc1-b909-88b79b035643",
                            Setor = 0,
                            Status = 0,
                            TelefoneCelular = 0L,
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            TwoFactorEnabled = false,
                            UserName = "alan.rezende@boxtecnologia.com.br"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetUserGroups", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "b3a5b61d-7ff4-43cb-bad4-a945b150fc72"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ChaveApiTerceiro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("ApiTerceiro")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataValidade")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChavesApiTerceiro", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ef06643-d760-4539-aece-9731e090a598"),
                            ApiTerceiro = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataValidade = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Cep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("20");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("50");

                    b.Property<string>("Cpf")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DataFundacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("5");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("500");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int?>("TipoPessoa")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<long>("BomControleContratoId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Periodicidade")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorContrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,5)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClienteContratos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContratoFatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<long>("BomControleFaturaId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ClienteContratoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataCompetencia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DataVencimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Desconto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,5)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NumeroParcela")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("Quitado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,5)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteContratoId");

                    b.ToTable("ClientesContratosFaturas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ClienteProdutos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<int>("CobrancaTipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ServicoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ServicoId");

                    b.ToTable("ClienteServicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Fornecedores", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<string>("CodigoProduto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorProdutos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<string>("CodigoServico")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorServicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("Pipelines", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineAssinante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.HasIndex("UserId");

                    b.ToTable("PipelineAssinantes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AlertaEstagnacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineEtapas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataConclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineEtapaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineEtapaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaAnexos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Titulo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaApontamentos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamentoAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaApontamentoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaApontamentoId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaApontamentoAnexos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAssinante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("UserId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaAssinantes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaTag", b =>
                {
                    b.Property<Guid>("TarefaTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("TarefaTagId", "PipelineTarefaId");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("TarefaTagId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaTags", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("CodigoUnico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("FornecedorProdutoId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCusto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodigoUnico")
                        .IsUnique();

                    b.HasIndex("FornecedorProdutoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Rotina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("ChaveSequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"OrderNumbers\"')");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCompetenciaFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCompetenciaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)");

                    b.Property<string>("DispatcherRoute")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Rotinas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7225157-5691-4785-9ef2-31bba714e293"),
                            ChaveSequencial = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9676), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina insere automaticamente no boxapp os clientes ativos do sistema Bom Controle",
                            DispatcherRoute = "dispatch-clientes-sync",
                            IsDeleted = false,
                            Nome = "Sincronização de clientes com o sistema Bom Controle",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9688), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("45260988-1ec0-4e8c-b708-1bb2f7c3d414"),
                            ChaveSequencial = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9706), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina insere automaticamente no boxapp os contratos de clientes ainda não existente, a partir do sistema Bom Controle.",
                            DispatcherRoute = "dispatch-contratos-sync",
                            IsDeleted = false,
                            Nome = "Sincronização de contratos de clientes com o sistema Bom Controle",
                            Observacao = "",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9707), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("669a9b45-772f-46bf-bf45-da355eab6e96"),
                            ChaveSequencial = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9726), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina atualiza a periodicidade dos novos contratos sincronizados a partir da rotina 2.",
                            DispatcherRoute = "dispatch-contratos-update",
                            IsDeleted = false,
                            Nome = "Atualização de contratos de clientes com o sistema Bom Controle",
                            Observacao = "A atualização de periodicidade que ocorre logo após a importação dos contratos só se faz necessária uma vez que, o método da api do sistema Bom Controle que retorna os contratos não traz este dado. Portanto, se faz necessário buscá-lo em um outro método da api do Bom Controle.",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9727), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("4229612d-a63d-476e-bd11-2af5c435078c"),
                            ChaveSequencial = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9731), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina insere automaticamente no boxapp todas as faturas quitadas de contratos de clientes do bom controle",
                            DispatcherRoute = "dispatch-faturas-quitadas-sync",
                            IsDeleted = false,
                            Nome = "Sincronização de faturas quitadas de contratos de clientes com o sistema Bom Controle",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9733), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("519471fa-0f42-46d9-b585-bc7bbd9d7fee"),
                            ChaveSequencial = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9736), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina insere automaticamente no boxapp todas as faturas não quitadas de contratos de clientes do bom controle",
                            DispatcherRoute = "dispatch-faturas-nao-quitadas-sync",
                            IsDeleted = false,
                            Nome = "Sincronização de faturas não quitadas de contratos de clientes com o sistema Bom Controle",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9738), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("e6bc9551-b3f3-4357-b87a-d3f9101177e7"),
                            ChaveSequencial = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9743), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina atualiza automaticamente no boxapp os dados de faturas a partir de informações do sistema Bom Controle.",
                            DispatcherRoute = "dispatch-faturas-update",
                            IsDeleted = false,
                            Nome = "Atualização dos dados de faturas de contratos de clientes com o sistema Bom Controle",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9744), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("0283739d-e2da-4f69-a1b4-fff0045f0cef"),
                            ChaveSequencial = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9748), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina interna gera as comissões de vendedores. As comissões são obtidas a partir dos dados de comissão (Em real ou Porcentagem), parametrizados ao vincular um contrato a um vendedor, bem como são geradas comissões apenas de contratos com faturas pagas (Em dia).",
                            DispatcherRoute = "dispatch-vendedores-comissoes-create",
                            IsDeleted = false,
                            Nome = "Gerar comissão de vendedores ativos no Boxapp",
                            Observacao = "É recomendado que antes de rodar esta rotina, seja rodado a rotina de ChaveSequencial - 2, 3 e 4 -, afim de atualizar os contratos e suas faturas.",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 569, DateTimeKind.Unspecified).AddTicks(9749), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.RotinaEventHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExceptionMensagem")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RotinaId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusProgresso")
                        .HasColumnType("integer");

                    b.Property<long>("TotalItensInsucesso")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalItensSucesso")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RotinaId");

                    b.ToTable("RotinaEventsHistories", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("CodigoUnico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorServicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCusto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodigoUnico")
                        .IsUnique();

                    b.HasIndex("FornecedorServicoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Servicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("TarefaTags", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeExibicao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppPrincipal")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            ApiKey = new Guid("57d390e7-2b87-47fe-9bc8-0bae3a388499"),
                            Cnpj = "12.368.943/0001-50",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 555, DateTimeKind.Unspecified).AddTicks(9041), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            EmailPrincipal = "rafale@boxtecnologia.com.br",
                            IsDeleted = false,
                            Nome = "Box Tecnologia Ltda",
                            NomeExibicao = "Box Tecnologia",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 10, 10, 36, 10, 555, DateTimeKind.Unspecified).AddTicks(9064), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Vendedores", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorComissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ClienteContratoFaturaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteContratoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorComissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClienteContratoFaturaId");

                    b.HasIndex("ClienteContratoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("VendedoresComissoes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorContrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ClienteContratoId")
                        .HasColumnType("uuid");

                    b.Property<int>("ComissaoPercentual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<decimal>("ComissaoReais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClienteContratoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("VendedoresContratos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("BadgeColor")
                        .HasColumnType("text");

                    b.Property<string>("BadgeContent")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExternalLink")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LevelMeKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelUpKey")
                        .HasColumnType("uuid");

                    b.Property<bool>("OpenInNewTab")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("SectionTitle")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("VerticalNavItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VerticalNavItemId");

                    b.ToTable("VerticalNavItems", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationGroups")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany("ApplicationUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Clientes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteContratos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContratoFatura", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ClienteContrato", "ClienteContrato")
                        .WithMany("ClientesContratosFaturas")
                        .HasForeignKey("ClienteContratoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClienteContrato");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteProduto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteProdutos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Produto", "Produto")
                        .WithMany("ClienteProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteServico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteServicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Servico", "Servico")
                        .WithMany("ClienteServicos")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Fornecedores")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorProdutos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorServicos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Pipelines")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineAssinante", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineAssinantes")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PipelineAssinantes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineEtapas")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineEtapa", "PipelineEtapa")
                        .WithMany("PipelineTarefas")
                        .HasForeignKey("PipelineEtapaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineEtapa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAnexo", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaAnexos")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaApontamentos")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamentoAnexo", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefaApontamento", "PipelineTarefaApontamento")
                        .WithMany("PipelineTarefaApontamentoAnexos")
                        .HasForeignKey("PipelineTarefaApontamentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefaApontamento");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAssinante", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaAssinantes")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PipelineTarefaAssinantes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaTag", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaTags")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.TarefaTag", "TarefaTag")
                        .WithMany("PipelineTarefaTags")
                        .HasForeignKey("TarefaTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");

                    b.Navigation("TarefaTag");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.FornecedorProduto", "FornecedorProduto")
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FornecedorProduto");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Rotina", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Rotinas")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.RotinaEventHistory", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Rotina", "Rotina")
                        .WithMany("RotinasEventsHistories")
                        .HasForeignKey("RotinaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rotina");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.FornecedorServico", "FornecedorServico")
                        .WithMany("Servicos")
                        .HasForeignKey("FornecedorServicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Servicos")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FornecedorServico");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Vendedor", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Vendedor")
                        .HasForeignKey("BoxBack.Domain.Models.Vendedor", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorComissao", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ClienteContratoFatura", "ClienteContratoFatura")
                        .WithMany()
                        .HasForeignKey("ClienteContratoFaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ClienteContrato", "ClienteContrato")
                        .WithMany("VendedoresComissoes")
                        .HasForeignKey("ClienteContratoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Vendedor", "Vendedor")
                        .WithMany("VendedorComissoes")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClienteContrato");

                    b.Navigation("ClienteContratoFatura");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorContrato", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ClienteContrato", "ClienteContrato")
                        .WithMany("VendedoresContratos")
                        .HasForeignKey("ClienteContratoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Vendedor", "Vendedor")
                        .WithMany("VendedorContratos")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClienteContrato");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.VerticalNavItem", null)
                        .WithMany("Children")
                        .HasForeignKey("VerticalNavItemId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserGroups");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserClaims");

                    b.Navigation("ApplicationUserGroups");

                    b.Navigation("ApplicationUserRoles");

                    b.Navigation("PipelineAssinantes");

                    b.Navigation("PipelineTarefaAssinantes");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Navigation("ClienteContratos");

                    b.Navigation("ClienteProdutos");

                    b.Navigation("ClienteServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.Navigation("ClientesContratosFaturas");

                    b.Navigation("VendedoresComissoes");

                    b.Navigation("VendedoresContratos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.Navigation("FornecedorProdutos");

                    b.Navigation("FornecedorServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.Navigation("PipelineAssinantes");

                    b.Navigation("PipelineEtapas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.Navigation("PipelineTarefas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.Navigation("PipelineTarefaAnexos");

                    b.Navigation("PipelineTarefaApontamentos");

                    b.Navigation("PipelineTarefaAssinantes");

                    b.Navigation("PipelineTarefaTags");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.Navigation("PipelineTarefaApontamentoAnexos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.Navigation("ClienteProdutos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Rotina", b =>
                {
                    b.Navigation("RotinasEventsHistories");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.Navigation("ClienteServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.Navigation("PipelineTarefaTags");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Navigation("ApplicationGroups");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Clientes");

                    b.Navigation("Fornecedores");

                    b.Navigation("Pipelines");

                    b.Navigation("Rotinas");

                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Vendedor", b =>
                {
                    b.Navigation("VendedorComissoes");

                    b.Navigation("VendedorContratos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
