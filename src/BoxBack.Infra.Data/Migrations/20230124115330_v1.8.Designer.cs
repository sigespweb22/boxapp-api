// <auto-generated />
using System;
using BoxBack.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoxBack.Infra.Data.Migrations
{
    [DbContext(typeof(BoxAppDbContext))]
    [Migration("20230124115330_v1.8")]
    partial class v18
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("OrderNumbers");

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 482, DateTimeKind.Unspecified).AddTicks(1223), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            IsDeleted = false,
                            Name = "Master",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UniqueKey = "ors0eAr4DPkvrwhy5gVnQAqRDnJUO43j9HzbkPyZ/7Q=",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 482, DateTimeKind.Unspecified).AddTicks(1240), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int[]>("Actions")
                        .HasColumnType("integer[]");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            Actions = new[] { 0 },
                            ConcurrencyStamp = "4629cea3-3b65-43b9-9c4e-7cc68fe4e4e4",
                            Description = "Pode realizar todas as ações/operações, bem como ter acesso a todos os dados e funcionalidades",
                            Name = "Master",
                            NormalizedName = "MASTER",
                            Subject = "all"
                        },
                        new
                        {
                            Id = "6f20e719-d56e-4b29-90c3-fad735274de3",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "59067293-6bd6-4272-b051-0fb60017aa18",
                            Description = "Pode realizar todas as ações/operações em todas as dashboards",
                            Name = "CanDashboardAll",
                            NormalizedName = "CANDASHBOARDALL",
                            Subject = "ac-dashboard-page"
                        },
                        new
                        {
                            Id = "745dfafa-f7b2-415c-b8f0-ba7cb2f41805",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "d9c2c163-b6f7-4ae1-91e0-ccfeb285fe1a",
                            Description = "Pode visualizar todas as dashboards do cliente",
                            Name = "CanDashboardClienteAll",
                            NormalizedName = "CANDASHBOARDCLIENTEALL",
                            Subject = "ac-dashboardCliente-page"
                        },
                        new
                        {
                            Id = "409e55a7-ede5-4b73-aca9-de4ffff4f012",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "a0126836-a7b7-412f-8ae0-d7341b31a897",
                            Description = "Pode visualizar todas as dashboards de controle de acesso",
                            Name = "CanDashboardControleAcessoAll",
                            NormalizedName = "CANDASHBOARDCONTROLEACESSOALL",
                            Subject = "ac-dashboardControleAcesso-page"
                        },
                        new
                        {
                            Id = "ab36a405-1e92-4e16-839d-315c707a0647",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "0747a6dd-9cac-4947-8379-b7711ce8bcf5",
                            Description = "Pode realizar todas as ações/operações em todos os usuários",
                            Name = "CanUserAll",
                            NormalizedName = "CANUSERALL",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "1ef17409-ea04-4947-a01e-8707f13fc286",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "96646554-e650-4ca5-8112-692ef83944cf",
                            Description = "Pode listar os dados de todos os usuários",
                            Name = "CanUserList",
                            NormalizedName = "CANUSERLIST",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "dc401bc3-8d4c-4137-a59d-42a406b4330a",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "98c376c4-e651-4487-a39e-6239b089189f",
                            Description = "Pode listar os dados de um usuários",
                            Name = "CanUserRead",
                            NormalizedName = "CANUSERREAD",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "18f2a597-ab5b-4ec9-a22a-23ba88da760d",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "e91dc247-239e-4548-9371-a66828484ed5",
                            Description = "Pode criar um usuário",
                            Name = "CanUserCreate",
                            NormalizedName = "CANUSERCREATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "ada5db28-57e5-491f-a21c-cf34679e186f",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "324d01ca-e1c4-4047-bf9f-4f554ca7bacf",
                            Description = "Pode atualizar os dados de um usuário",
                            Name = "CanUserUpdate",
                            NormalizedName = "CANUSERUPDATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "41a6a347-4597-491d-bfa2-82e7c2eb84af",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "c935b7a1-7bf6-4c4b-899b-eabf6f85fc24",
                            Description = "Pode deletar um usuário",
                            Name = "CanUserDelete",
                            NormalizedName = "CANUSERDELETE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "010ca467-0bde-450f-8126-fc00c9fbb841",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "80f1fb47-b23d-45a5-b783-95114da064cb",
                            Description = "Pode realizar todas as ações/operações em todos as roles/permissões",
                            Name = "CanRoleAll",
                            NormalizedName = "CANROLEALL",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "a2cd6864-650d-4ade-85cd-08ae7a5836dd",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "36dd0e1d-bf85-42b1-8275-7b0384a1cd02",
                            Description = "Pode listar os dados de todas as roles/permissões",
                            Name = "CanRoleList",
                            NormalizedName = "CANROLELIST",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "d9a12c1b-fdfd-49f3-84c0-a26545ed97c0",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "2b6cde73-c65e-49a5-a570-b32b1025a266",
                            Description = "Pode listar os dados de uma roles/permissão",
                            Name = "CanRoleRead",
                            NormalizedName = "CANROLEREAD",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "b31eb583-1838-49ab-ad76-4dd9d5ef2d9b",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "e285e53b-1a5a-4d41-9b1c-5975ca29f5fa",
                            Description = "Pode criar uma role/permissão",
                            Name = "CanRoleCreate",
                            NormalizedName = "CANROLECREATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "02225a2c-2c73-4a57-8e03-75425f103f70",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "d3e157ea-6772-415f-ab85-84922f58114c",
                            Description = "Pode atualizar os dados de uma roles/permissão",
                            Name = "CanRoleUpdate",
                            NormalizedName = "CANROLEUPDATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "e7266a8d-dba8-4fd9-b282-73a40714ad96",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "e3c5faa2-8884-4fb4-9a17-4a0864b204ee",
                            Description = "Pode deletar uma role/permissão",
                            Name = "CanRoleDelete",
                            NormalizedName = "CANROLEDELETE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "043bb06a-3238-4bcc-9d13-437a4f23e554",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "748bfd42-16c5-4431-a233-9da39cad30b8",
                            Description = "Pode realizar todas as ações/operações em todos os grupos",
                            Name = "CanGroupAll",
                            NormalizedName = "CANGROUPALL",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "31b05c2f-515a-42b8-80d6-11a286d1b433",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "5c03b032-573f-4a68-8f96-219d25783f30",
                            Description = "Pode listar os dados de todos os grupos",
                            Name = "CanGroupList",
                            NormalizedName = "CANGROUPLIST",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "cb6aa67c-e697-44e0-9847-0dcb3d8ef3aa",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "44249557-5231-481d-b584-6bb2fa86fcd2",
                            Description = "Pode listar os dado de um grupo",
                            Name = "CanGroupRead",
                            NormalizedName = "CANGROUPREAD",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "d2924f4b-40fe-46ff-b863-63a80c613777",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "4557518b-6fe1-4cb2-beaf-e535269169c4",
                            Description = "Pode criar um grupo",
                            Name = "CanGroupCreate",
                            NormalizedName = "CANGROUPCREATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "9923cc10-6d73-4375-a551-a6767d67bbf2",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "652afc22-a8ac-4d29-a0b3-b7421180babb",
                            Description = "Pode atualizar os dados de um grupo",
                            Name = "CanGroupUpdate",
                            NormalizedName = "CANGROUPUPDATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "183e964c-aa88-4f52-acce-87f77f7bb362",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "f4d74829-bdb3-4bfd-94a5-37430e5ef685",
                            Description = "Pode deletar um grupo",
                            Name = "CanGroupDelete",
                            NormalizedName = "CANGROUPDELETE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "6e36f8d7-83f4-43fc-b995-1f19d2503151",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "00941a7b-f275-4c31-aa0c-3ace6a5581a7",
                            Description = "Pode visualizar todos os indicadores da dashboard comercial",
                            Name = "CanClienteAll",
                            NormalizedName = "CANCLIENTEALL",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "e454c02e-dc1a-4d75-9430-32f8165527f3",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "65e5c986-f0a5-4e8c-8872-2e82137144b5",
                            Description = "Pode listar os dados de todos os clientes",
                            Name = "CanClienteList",
                            NormalizedName = "CANCLIENTELIST",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "b0a896ad-8c8a-4f82-8888-f44f0870df93",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "b2c7c6ea-e390-4916-b676-6e1895c7b64f",
                            Description = "Pode listar os dado de um cliente",
                            Name = "CanClienteRead",
                            NormalizedName = "CANCLIENTEREAD",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "21612f29-c23e-42c0-88b9-b2004f656d1d",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "d3b123eb-5344-4443-bd61-7085bf61c21b",
                            Description = "Pode criar um cliente",
                            Name = "CanClienteCreate",
                            NormalizedName = "CANCLIENTECREATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "efafc1bb-d828-45a1-888e-7c01cc36e781",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "93aa5a0f-698a-45b7-a01c-1d25efe6dc8f",
                            Description = "Pode atualizar os dados de um cliente",
                            Name = "CanClienteUpdate",
                            NormalizedName = "CANCLIENTEUPDATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "2b476346-9db8-44c7-ac65-1ff1ab5f3876",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "2426fd45-60fb-47af-a947-8759edd5f05b",
                            Description = "Pode deletar um cliente",
                            Name = "CanClienteDelete",
                            NormalizedName = "CANCLIENTEDELETE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "754a0444-6d81-4661-b6a0-54858f751941",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "066058d1-5fb7-4c3f-81e6-11cb901fe8c0",
                            Description = "Pode listar o título do sistema",
                            Name = "CanTitleSystemList",
                            NormalizedName = "CANTITLESYSTEMLIST",
                            Subject = "ac-titleSystem-page"
                        },
                        new
                        {
                            Id = "15b23a65-bb25-411f-ac81-c302f117afac",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "5d194722-ebc9-4323-bb8f-b249c6861e55",
                            Description = "Pode listar o título dos negócios",
                            Name = "CanTitleBussinesList",
                            NormalizedName = "CANTITLEBUSSINESLIST",
                            Subject = "ac-titleBussines-page"
                        },
                        new
                        {
                            Id = "9e5bba0a-a23f-4e5a-af8a-06874cca9c76",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "f3302af8-7f15-4aa6-bf4c-71c398fb5f41",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de clientes",
                            Name = "CanClienteServicoAll",
                            NormalizedName = "CANCLIENTESERVICOALL",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "9085129d-c364-4e31-9ca2-e5dc4d0a0753",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "527e0245-5864-4002-b335-9118451937a6",
                            Description = "Pode listar os dados de todos os serviços de clientes",
                            Name = "CanClienteServicoList",
                            NormalizedName = "CANCLIENTESERVICOLIST",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "9de3482f-27a6-4353-b41b-fb0732084fd5",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "d086c4c9-f218-4d75-b6b8-e9389a44a909",
                            Description = "Pode listar os dado de um serviço de cliente",
                            Name = "CanClienteServicoRead",
                            NormalizedName = "CANCLIENTESERVICOREAD",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "4ea9a8ec-b6ec-49b2-9f1b-47041c6109e7",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "8db30146-3db3-4c4a-9680-c183e11874d3",
                            Description = "Pode criar um serviço para um cliente",
                            Name = "CanClienteServicoCreate",
                            NormalizedName = "CANCLIENTESERVICOCREATE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "67d3a714-8d20-43b7-b6a8-b61747c6e44e",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "2386f7b6-85c2-4133-918b-6cefdd35da76",
                            Description = "Pode atualizar um serviço de um cliente",
                            Name = "CanClienteServicoUpdate",
                            NormalizedName = "CANCLIENTESERVICOUPDATE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "ada32923-d1b9-4c49-a4f0-2f4ebf09d1ce",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "95a57db7-382a-41e3-99d8-4c03ddf6bb63",
                            Description = "Pode deletar um serviço de um cliente",
                            Name = "CanClienteServicoDelete",
                            NormalizedName = "CANCLIENTESERVICODELETE",
                            Subject = "ac-clienteServico-page"
                        },
                        new
                        {
                            Id = "f23b7259-f94c-4fd5-8305-b18c41bb14f0",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "d17f5e94-f3bb-4783-9f24-fea91926c1cf",
                            Description = "Pode realizar todas as ações/operações em todos os serviços",
                            Name = "CanServicoAll",
                            NormalizedName = "CANSERVICOALL",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "04c3b6a4-185e-40f6-aa02-ae7bd9f22602",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "c9b4722d-c3fa-4020-b3b0-8a9ef28cf741",
                            Description = "Pode listar os dados de todos os serviços",
                            Name = "CanServicoList",
                            NormalizedName = "CANSERVICOLIST",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "23e7bc2d-c01f-4fca-ab65-a1cfbfe3494b",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "13f1a476-7eb8-4e11-89a6-da6ba646e781",
                            Description = "Pode listar os dados de um serviço",
                            Name = "CanServicoRead",
                            NormalizedName = "CANSERVICOREAD",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "0ab971dd-72a9-4a25-96ff-6fa2779807e2",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "c8742458-ddcb-416c-a8b2-d7d9105c0e9d",
                            Description = "Pode atualizar um serviço",
                            Name = "CanServicoUpdate",
                            NormalizedName = "CANSERVICOUPDATE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "fcc83428-f4b6-4ab7-850c-7e9bde03c2b5",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "037f81a6-e06a-463d-8c50-40da84a740b6",
                            Description = "Pode criar um serviço",
                            Name = "CanServicoCreate",
                            NormalizedName = "CANSERVICOCREATE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "21e66e31-b8e9-46ef-aed7-dd55efc873f3",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "02f75208-cba3-4abb-a896-ceb7f517c5f6",
                            Description = "Pode deletar um serviço",
                            Name = "CanServicoDelete",
                            NormalizedName = "CANSERVICODELETE",
                            Subject = "ac-servico-page"
                        },
                        new
                        {
                            Id = "e0091078-46e5-4035-b823-04b478c8dbc3",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "d2c39b4b-42d4-45ba-bf14-c5403e1b4458",
                            Description = "Pode realizar todas as ações/operações em todos os pipelines",
                            Name = "CanPipelineAll",
                            NormalizedName = "CANPIPELINEALL",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "e92f15a8-9323-4fd4-b509-7963c10f8d1f",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "a241a569-9b45-4c5d-a898-be3d1a91de12",
                            Description = "Pode listar os dados de todos os pipelines",
                            Name = "CanPipelineList",
                            NormalizedName = "CANPIPELINELIST",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "1fff078f-2c84-4254-857c-35b18b9f4d1e",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "1ded5dc7-60c0-4405-bd00-45e92cb14de2",
                            Description = "Pode listar os dados de um pipeline",
                            Name = "CanPipelineRead",
                            NormalizedName = "CANPIPELINEREAD",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "f8119496-e412-47fb-a9ee-ee79584a4727",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "763a6808-43e7-4baa-87e9-d003bb2d36db",
                            Description = "Pode criar um pipeline",
                            Name = "CanPipelineCreate",
                            NormalizedName = "CANPIPELINECREATE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "28c83627-aaf3-4a9b-982f-15635ea61f5e",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "06ec8f86-280d-4f05-a0c7-055d42cd55c5",
                            Description = "Pode atualizar um pipeline",
                            Name = "CanPipelineUpdate",
                            NormalizedName = "CANPIPELINEUPDATE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "58bd775b-4f28-4213-993d-5c50cb9087d2",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "fff67a3d-54b3-4c49-90b3-88493506526a",
                            Description = "Pode deletar um pipeline",
                            Name = "CanPipelineDelete",
                            NormalizedName = "CANPIPELINEDELETE",
                            Subject = "ac-pipeline-page"
                        },
                        new
                        {
                            Id = "27906c3c-640a-4283-bf07-c1bf06ec2cc3",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "f98cc582-fd3d-45ac-8375-405e8358fd8d",
                            Description = "Pode realizar todas as ações/operações em todos os fornecedores",
                            Name = "CanFornecedorAll",
                            NormalizedName = "CANFORNECEDORALL",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "b7fb0b25-206b-4200-82d5-7ecabdbec0d3",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "6157a78e-7d7b-4484-80ba-3dfe4d6b4e36",
                            Description = "Pode listar os dados de todos os fornecedores",
                            Name = "CanFornecedorList",
                            NormalizedName = "CANFORNECEDORLIST",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "bf0a2e56-6de3-4498-9fb9-5728b4a77eea",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "8b140073-33cf-4efe-8fe7-0b0cdc44d1f1",
                            Description = "Pode listar os dados de um fornecedor",
                            Name = "CanFornecedorRead",
                            NormalizedName = "CANFORNECEDORREAD",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "1de5a91e-84f4-4cb3-9750-0fa094c862d3",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "71ef4a3f-ce0c-43ea-858b-e263e59470c4",
                            Description = "Pode criar um fornecedor",
                            Name = "CanFornecedorCreate",
                            NormalizedName = "CANFORNECEDORCREATE",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "e9b0b030-2217-4e0c-9784-012751eb1895",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "a4073ac4-afbb-49fa-b8a0-bc6c35272c3c",
                            Description = "Pode atualizar um fornecedor",
                            Name = "CanFornecedorUpdate",
                            NormalizedName = "CANFORNECEDORUPDATE",
                            Subject = "ac-fornecedor-page"
                        },
                        new
                        {
                            Id = "152da1d6-10de-446d-9478-f7f0ae983e95",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "17615f0e-6ea7-4273-ac3a-1c1a41a0505e",
                            Description = "Pode deletar um fornecedor",
                            Name = "CanForncedorDelete",
                            NormalizedName = "CANFORNCEDORDELETE",
                            Subject = "ac-forncedor-page"
                        },
                        new
                        {
                            Id = "76389d03-89fb-401c-91e0-86461c56854a",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "7d44e2f4-21d9-4d79-b963-a255d16c296a",
                            Description = "Pode realizar todas as ações/operações em todos os serviços de fornecedores",
                            Name = "CanFornecedorServicoAll",
                            NormalizedName = "CANFORNECEDORSERVICOALL",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "975b2fc8-7fc3-4260-b2bf-cef28d985f14",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "e0bb45fe-b8e3-44b4-a5a1-d3696bcd57a6",
                            Description = "Pode listar os dados de todos os serviços de fornecedores",
                            Name = "CanFornecedorServicoList",
                            NormalizedName = "CANFORNECEDORSERVICOLIST",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "984d63be-8187-4769-a48d-18927ab14852",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "47cd528f-847a-4378-80f7-34f05c953a16",
                            Description = "Pode listar os dado de um serviço de fornecedor",
                            Name = "CanFornecedorServicoRead",
                            NormalizedName = "CANFORNECEDORSERVICOREAD",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "eec0ac7e-ca17-4ad3-8856-ef4abff1b5b9",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "e5358f3c-8b6d-4969-bf9c-c922af717933",
                            Description = "Pode criar um serviço para um fornecedor",
                            Name = "CanFornecedorServicoCreate",
                            NormalizedName = "CANFORNECEDORSERVICOCREATE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "60c536d5-e5e7-4a8a-9707-67931181a144",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "90fb8b7a-379c-46f2-836b-6eda54b0bfd6",
                            Description = "Pode atualizar um serviço de um fornecedor",
                            Name = "CanFornecedorServicoUpdate",
                            NormalizedName = "CANFORNECEDORSERVICOUPDATE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "943b2365-b5c9-4fda-a442-0f22b513b998",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "1197092d-ecce-4be2-8da4-c43ff7cd6f23",
                            Description = "Pode deletar um serviço de um fornecedor",
                            Name = "CanFornecedorServicoDelete",
                            NormalizedName = "CANFORNECEDORSERVICODELETE",
                            Subject = "ac-fornecedorServico-page"
                        },
                        new
                        {
                            Id = "b6264e92-53f8-4248-8e2f-b8982234964c",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "e07db7c4-151e-4c84-af1b-ac15a22533cf",
                            Description = "Pode realizar todas as ações/operações em todos os produtos",
                            Name = "CanProdutoAll",
                            NormalizedName = "CANPRODUTOALL",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "c8899618-16fb-4c9c-a1d5-9038ad7c89aa",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "dde92baf-8471-4096-9e65-0e6e935ca5e3",
                            Description = "Pode listar os dados de todos os produtos",
                            Name = "CanProdutoList",
                            NormalizedName = "CANPRODUTOLIST",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "4e9a49a2-580e-4c4a-9b6b-3f99f6e30c33",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "76f20286-5487-45f0-8f6f-81439f1aa0d4",
                            Description = "Pode listar os dados de um produtos",
                            Name = "CanProdutoRead",
                            NormalizedName = "CANPRODUTOREAD",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "1ac134b0-ba45-4dc1-8f2b-62b9ecb64fca",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "efce0d7b-534e-4ec4-b183-508ea7af8572",
                            Description = "Pode criar um produtos",
                            Name = "CanProdutoCreate",
                            NormalizedName = "CANPRODUTOCREATE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "c540014b-c766-4714-8a9f-bc87b7507336",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "5343eeb3-96cb-46f2-beeb-3340458c5025",
                            Description = "Pode atualizar um produtos",
                            Name = "CanProdutoUpdate",
                            NormalizedName = "CANPRODUTOUPDATE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "3e49b1fd-eb10-4a65-92fc-9a5b7edaee76",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "5eaf3478-97a8-41cc-906b-1165d2f97265",
                            Description = "Pode deletar um produtos",
                            Name = "CanProdutoDelete",
                            NormalizedName = "CANPRODUTODELETE",
                            Subject = "ac-produto-page"
                        },
                        new
                        {
                            Id = "2786d48c-183e-47f6-9b80-72050bf57a7e",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "4291e44d-f8e1-4cd7-bbfb-1be5c86f36ba",
                            Description = "Pode realizar todas as ações/operações em todos os contratos de clientes",
                            Name = "CanClienteContratoAll",
                            NormalizedName = "CANCLIENTECONTRATOALL",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "cf28cf15-e6c0-4ceb-807a-aa55407f0aa7",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "6e739807-a82f-4d38-8b5f-51b970ee3480",
                            Description = "Pode listar os dados de todos os contratos de clientes",
                            Name = "CanClienteContratoList",
                            NormalizedName = "CANCLIENTECONTRATOLIST",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "db1d4e9e-ac3e-462b-a934-292c96afce66",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "06ce8d01-5fb5-4d9f-b4f1-e426ab1145cf",
                            Description = "Pode listar os dados de um contrato de cliente",
                            Name = "CanClienteContratoRead",
                            NormalizedName = "CANCLIENTECONTRATOREAD",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "f0a236f1-d1a8-4dbf-b5e7-36a9c2c23299",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "abb0ace1-6fe9-415d-80ee-a7bf9b0d05c1",
                            Description = "Pode criar um contrato de cliente",
                            Name = "CanClienteContratoCreate",
                            NormalizedName = "CANCLIENTECONTRATOCREATE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "aa567199-2285-4354-bc03-09e55e83b549",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "09fd160f-a1df-4554-ab02-757f4ab7fde2",
                            Description = "Pode atualizar um contrato de cliente",
                            Name = "CanClienteContratoUpdate",
                            NormalizedName = "CANCLIENTECONTRATOUPDATE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "173c622e-08ac-4133-aaca-998c0d549d0c",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "bd4085bd-866d-4c1e-be5c-065f4c0a631d",
                            Description = "Pode deletar um contrato de cliente",
                            Name = "CanClienteContratoDelete",
                            NormalizedName = "CANCLIENTECONTRATODELETE",
                            Subject = "ac-clienteContrato-page"
                        },
                        new
                        {
                            Id = "01b8e389-9cf8-45d7-bea1-f545794702a6",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "e9920a8e-3d1b-4ebc-8bf6-c4549f8beaf8",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de clientes",
                            Name = "CanClienteProdutoAll",
                            NormalizedName = "CANCLIENTEPRODUTOALL",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "8f05a09a-8ed1-49e5-a54e-5a606fe3a14d",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "7fc19424-ba61-46d4-99bc-be17e5b3992f",
                            Description = "Pode listar os dados de todos os produtos de clientes",
                            Name = "CanClienteProdutoList",
                            NormalizedName = "CANCLIENTEPRODUTOLIST",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "41b4a59f-62e6-46e6-a812-0e656fde1d91",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "eb212e92-da53-45cb-9df6-543275e3b573",
                            Description = "Pode listar os dados de um produto de cliente",
                            Name = "CanClienteProdutoRead",
                            NormalizedName = "CANCLIENTEPRODUTOREAD",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "4822123b-6332-420c-9d4b-88f5d020f5c6",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "38ab5f42-3726-4753-b6b1-eee0db9c88a5",
                            Description = "Pode criar um produto de cliente",
                            Name = "CanClienteProdutoCreate",
                            NormalizedName = "CANCLIENTEPRODUTOCREATE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "695c661f-64b3-4b0a-90c6-0186581711ed",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "ea49db02-5083-49da-bfd7-33c45b39eb31",
                            Description = "Pode atualizar um produto de cliente",
                            Name = "CanClienteProdutoUpdate",
                            NormalizedName = "CANCLIENTEPRODUTOUPDATE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "bc978d88-5463-409d-8e81-213054185da6",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "3fac447b-52e9-4ebc-a831-0e24cffea7d3",
                            Description = "Pode deletar um produto de cliente",
                            Name = "CanClienteProdutoDelete",
                            NormalizedName = "CANCLIENTEPRODUTODELETE",
                            Subject = "ac-clienteProduto-page"
                        },
                        new
                        {
                            Id = "9a27bfa2-ebe3-411c-9a99-eac681b451eb",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "5f445f25-300a-4951-8307-570be0555ad5",
                            Description = "Pode realizar todas as ações/operações em todos os produtos de fornecedores",
                            Name = "CanFornecedorProdutoAll",
                            NormalizedName = "CANFORNECEDORPRODUTOALL",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "012c67b8-23e9-4925-8616-2aaae38019ec",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "a9f651b1-1bf4-41cf-ac01-81b6853cd4db",
                            Description = "Pode listar os dados de todos os produtos de fornecedores",
                            Name = "CanFornecedorProdutoList",
                            NormalizedName = "CANFORNECEDORPRODUTOLIST",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "ddd727cb-8413-41fd-974b-25d22b445750",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "027a851d-6c44-4fc2-b78f-53ef0237bccf",
                            Description = "Pode listar os dados de um produto de fornecedor",
                            Name = "CanFornecedorProdutoRead",
                            NormalizedName = "CANFORNECEDORPRODUTOREAD",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "ba7014f6-bd83-4c9e-a798-b8988c886b98",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "3ae184d3-ad6e-4f9a-bb93-38fe7bf970cf",
                            Description = "Pode visualizar um produto de fornecedor",
                            Name = "CanFornecedorProdutoCreate",
                            NormalizedName = "CANFORNECEDORPRODUTOCREATE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "957e61fd-7f4d-4568-b9d1-1221c0eed23d",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "271e7d43-2dbf-46b1-975e-6a085ed82f04",
                            Description = "Pode criar um produto de fornecedor",
                            Name = "CanFornecedorProdutoUpdate",
                            NormalizedName = "CANFORNECEDORPRODUTOUPDATE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "ab8b265b-efba-4c71-8f71-bce2ed41f969",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "030cfaba-a175-4bb1-b8c9-af1fea874f4a",
                            Description = "Pode deletar um produto de fornecedor",
                            Name = "CanFornecedorProdutoDelete",
                            NormalizedName = "CANFORNECEDORPRODUTODELETE",
                            Subject = "ac-fornecedorProduto-page"
                        },
                        new
                        {
                            Id = "c4ecb7a7-28f4-4aa9-8c9a-ac6eab1ba7e6",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "9c15a98c-cc58-49d6-96cb-0a0005cd72ef",
                            Description = "Pode realizar todas as ações/operações em dashboard comercial",
                            Name = "CanDashboardComercialAll",
                            NormalizedName = "CANDASHBOARDCOMERCIALALL",
                            Subject = "ac-dashboardComercial-page"
                        },
                        new
                        {
                            Id = "bc43366c-60f7-45d9-a871-d3dd26833cdc",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "e8410e9f-4e11-44f6-ab5e-0a12d6408663",
                            Description = "CanDashboardComercialClienteContratoList",
                            Name = "CanDashboardComercialClienteContratoList",
                            NormalizedName = "CANDASHBOARDCOMERCIALCLIENTECONTRATOLIST",
                            Subject = "ac-dashboardComercialClienteContrato-page"
                        },
                        new
                        {
                            Id = "e43696d3-7a33-4472-aed6-6c8b6d547ecb",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "23abe25c-5b3f-49ff-bc8c-582935c88909",
                            Description = "Pode listar os dados de todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroAll",
                            NormalizedName = "CANCHAVEAPITERCEIROALL",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "8c53566d-9e38-4532-9a06-20028bcc195c",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "10579ea1-8266-4366-8c01-f6a2c9d38333",
                            Description = "Pode listar os dados de todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroList",
                            NormalizedName = "CANCHAVEAPITERCEIROLIST",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "572a2a04-3727-4412-914b-0a7a2f772b2b",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "1c373c55-65b5-4e47-9329-b9ed1002859c",
                            Description = "Pode listar os dados de todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroRead",
                            NormalizedName = "CANCHAVEAPITERCEIROREAD",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "8da80b14-e29a-414c-8592-45ff68b94846",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "a8b32ed6-f760-4d88-93b3-581adcf45963",
                            Description = "Pode listar os dados de todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroCreate",
                            NormalizedName = "CANCHAVEAPITERCEIROCREATE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "fe9691bb-4ef5-4222-aa63-1871bac4fdca",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "bf9f7059-69f3-443e-9650-e6551d5b90a7",
                            Description = "Pode listar os dados de todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroUpdate",
                            NormalizedName = "CANCHAVEAPITERCEIROUPDATE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "f7a053fb-cc9f-47c6-a92e-87972c921987",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "95d25c31-4be2-40d9-aa0f-890695a061f4",
                            Description = "Pode listar os dados de todas as chaves de api de terceiro",
                            Name = "CanChaveApiTerceiroDelete",
                            NormalizedName = "CANCHAVEAPITERCEIRODELETE",
                            Subject = "ac-chaveApiTerceiro-page"
                        },
                        new
                        {
                            Id = "7863d7d3-9b18-44fc-9fe5-bd49dadad71f",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "00244c9b-b3d5-467c-bdb5-ae288670cef0",
                            Description = "Pode realizar todas as ações/operações em dashboard publica",
                            Name = "CanDashboardPublicaAll",
                            NormalizedName = "CANDASHBOARDPUBLICAALL",
                            Subject = "ac-dashboardPublica-page"
                        },
                        new
                        {
                            Id = "2ac74703-6cad-4bb6-953f-397c5c85451f",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "02598490-cd3d-4d79-ab19-69ebdede87de",
                            Description = "CanDashboardPublicaClienteContratoList",
                            Name = "CanDashboardPublicaClienteContratoList",
                            NormalizedName = "CANDASHBOARDPUBLICACLIENTECONTRATOLIST",
                            Subject = "ac-dashboardPublicaClienteContrato-page"
                        },
                        new
                        {
                            Id = "a879a476-4433-4594-bee2-ddd835b1c972",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "25b1333b-e3a5-4b13-8864-fa176601a318",
                            Description = "Pode realizar todas as ações/operações em todos os vendedores",
                            Name = "CanVendedorAll",
                            NormalizedName = "CANVENDEDORALL",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "9e0978d1-c3ef-4895-bc8b-b7befd6467c9",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "11b61624-8453-487d-9a77-085c23bb8c54",
                            Description = "Pode listar os dados de todos os vendedores",
                            Name = "CanVendedorList",
                            NormalizedName = "CANVENDEDORLIST",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "3ae13c1e-4d7a-4f55-ab5e-a4d77ec1e852",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "5b19d90a-425a-4bc0-8870-13f21eff60c9",
                            Description = "Pode listar os dados de um vendedor",
                            Name = "CanVendedorRead",
                            NormalizedName = "CANVENDEDORREAD",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "0fae21d9-bb3f-4135-b235-d2e1928d8332",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "fb08b519-bdd1-4722-8a3d-c28c55395847",
                            Description = "Pode visualizar um vendedor",
                            Name = "CanVendedorCreate",
                            NormalizedName = "CANVENDEDORCREATE",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "8cedba76-dca3-4708-8cdc-d1946593a2c4",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "c363cc86-dbf4-4e8b-8a11-3523cec9e897",
                            Description = "Pode criar um vendedor",
                            Name = "CanVendedorUpdate",
                            NormalizedName = "CANVENDEDORUPDATE",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "c5bf6bf9-71f9-4ee3-8ba8-10f3e29dd025",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "3b6e06f6-cac1-44a4-bc08-4bd4c0508e21",
                            Description = "Pode deletar um vendedor",
                            Name = "CanVendedorDelete",
                            NormalizedName = "CANVENDEDORDELETE",
                            Subject = "ac-vendedor-page"
                        },
                        new
                        {
                            Id = "dcc5005e-303e-49ba-b013-b078afade695",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "6b256a83-590f-4b53-97f0-b4527dba9461",
                            Description = "Pode realizar todas as ações/operações em todas as comissões de vendedores",
                            Name = "CanVendedorComissaoAll",
                            NormalizedName = "CANVENDEDORCOMISSAOALL",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "71932d72-c275-456e-b7aa-24a55e6b4c6e",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "53c93501-1331-458d-824e-07d3c6e54e05",
                            Description = "Pode listar os dados de comissão de vendedores",
                            Name = "CanVendedorComissaoList",
                            NormalizedName = "CANVENDEDORCOMISSAOLIST",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "bc3791dd-d18b-4287-b1d6-eb76355767ca",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "aa9d4088-dfd9-44b5-88f1-1293ee91af82",
                            Description = "Pode listar os dados de uma comissão de vendedor",
                            Name = "CanVendedorComissaoRead",
                            NormalizedName = "CANVENDEDORCOMISSAOREAD",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "5add918c-35d4-4dc8-b0ab-e3f95228a65f",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "3682a117-4789-42d4-9a78-d502f38594cc",
                            Description = "Pode visualizar uma comissão de vendedor",
                            Name = "CanVendedorComissaoCreate",
                            NormalizedName = "CANVENDEDORCOMISSAOCREATE",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "9ed8895a-7da7-454a-ad84-1e558aecef03",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "eb515233-19c9-471c-8683-6fc91d67f6a5",
                            Description = "Pode criar uma comissão de vendedor",
                            Name = "CanVendedorComissaoUpdate",
                            NormalizedName = "CANVENDEDORCOMISSAOUPDATE",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "012c88c2-1c3c-43bd-9d68-44fc6c4ce3b9",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "0f5db589-de67-4e73-84f3-9de3eec2bf84",
                            Description = "Pode deletar uma comissão de vendedor",
                            Name = "CanVendedorComissaoDelete",
                            NormalizedName = "CANVENDEDORCOMISSAODELETE",
                            Subject = "ac-vendedorComissao-page"
                        },
                        new
                        {
                            Id = "d54340a4-2242-4e0b-be0e-f0bab193b8ee",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "20fcaac8-1401-42a3-8a40-57d7f917f496",
                            Description = "Pode realizar todas as ações/operações em todos os contratos vinculados a vendedores",
                            Name = "CanVendedorContratoAll",
                            NormalizedName = "CANVENDEDORCONTRATOALL",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "22d8534e-6db4-4755-b6c3-eee0d4680359",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "27df55dc-a490-4fe8-9ee2-4eb6c06a4dc3",
                            Description = "Pode listar os dados de todos os contratos vinculados a vendedores",
                            Name = "CanVendedorContratoList",
                            NormalizedName = "CANVENDEDORCONTRATOLIST",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "4c9972c2-5a42-4f10-ad2a-cfcbe147a06a",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "05f3b507-3ae4-42a7-a80d-cf3f143a18b5",
                            Description = "Pode listar os dados de um contrato vinculado a um vendedor",
                            Name = "CanVendedorContratoRead",
                            NormalizedName = "CANVENDEDORCONTRATOREAD",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "f00c274f-60bd-4d08-a4b3-44fe714e71eb",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "31d59c0b-8aa6-4cd5-aabc-c3b74d8d3c5a",
                            Description = "Pode visualizar um contrato vinculado a um ou vários vendedores",
                            Name = "CanVendedorContratoCreate",
                            NormalizedName = "CANVENDEDORCONTRATOCREATE",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "a22e43c8-150f-4c21-ba5d-e2bef3bdd389",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "b75cf8dd-5ac6-477e-99ed-eb6ec73c0208",
                            Description = "Pode criar um vínculo de contrato a um vendedor",
                            Name = "CanVendedorContratoUpdate",
                            NormalizedName = "CANVENDEDORCONTRATOUPDATE",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "e2aeb8c9-88cc-46f1-b4e5-45470d2aee99",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "85904d37-bc03-48bc-aeed-7f935d68c95c",
                            Description = "Pode deletar um vínculo de contrato com um vendedor",
                            Name = "CanVendedorContratoDelete",
                            NormalizedName = "CANVENDEDORCONTRATODELETE",
                            Subject = "ac-vendedorContrato-page"
                        },
                        new
                        {
                            Id = "f4bc751f-36ea-4436-a04b-d36386b4532a",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "1b4f08c4-60d9-40ed-b154-896e1b51204c",
                            Description = "Pode realizar todas as ações/operações em todas as faturas de contratos de clientes",
                            Name = "CanClienteContratoFaturaAll",
                            NormalizedName = "CANCLIENTECONTRATOFATURAALL",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "75beb8ed-d1e8-4074-9273-8acd5ea378ef",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "9ba6a93b-0e01-4564-95c4-10899ec91d91",
                            Description = "Pode listar os dados de todas as faturas de contratos de clientes",
                            Name = "CanClienteContratoFaturaList",
                            NormalizedName = "CANCLIENTECONTRATOFATURALIST",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "f429ff3d-14fe-42c3-90dc-cfbe49859a0b",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "26a85ec1-5629-43ea-a036-56ab1e587632",
                            Description = "Pode listar os dados de uma fatura de contrato de cliente",
                            Name = "CanClienteContratoFaturaRead",
                            NormalizedName = "CANCLIENTECONTRATOFATURAREAD",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "aaee8960-8d14-487e-a5af-166d51d4f28e",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "0a8bc992-2005-4616-9bab-1136e3c1fd8f",
                            Description = "Pode visualizar uma fatura de contrato de cliente",
                            Name = "CanClienteContratoFaturaCreate",
                            NormalizedName = "CANCLIENTECONTRATOFATURACREATE",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "e7f8ce0e-3a63-42bc-ada3-05f7a9daefd6",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "d7f12f2a-462c-4fcd-9f3d-d6fa94db93b6",
                            Description = "Pode criar uma fatura de contrato de cliente",
                            Name = "CanClienteContratoFaturaUpdate",
                            NormalizedName = "CANCLIENTECONTRATOFATURAUPDATE",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "53167d05-7ad7-4d14-896b-c189817ac80f",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "5a63e384-4b7b-44f6-b67b-543cb9994553",
                            Description = "Pode deletar uma fatura de contrato de cliente",
                            Name = "CanClienteContratoFaturaDelete",
                            NormalizedName = "CANCLIENTECONTRATOFATURADELETE",
                            Subject = "ac-clienteContratoFatura-page"
                        },
                        new
                        {
                            Id = "c2f0c08c-ab59-4afb-aa48-f300cb191ebe",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "c686cdfd-abf5-4b77-b616-d5582b88ceeb",
                            Description = "Pode realizar todas as ações/operações relacionadas a entidade de sistema rotina",
                            Name = "CanRotinaAll",
                            NormalizedName = "CANROTINAALL",
                            Subject = "ac-rotina-page"
                        },
                        new
                        {
                            Id = "39d039a1-b129-439b-a5b6-d35cebfa0f1f",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "781ad781-3f2e-4e96-91a4-533daa16a283",
                            Description = "Pode listar todas as rotinas de sistema",
                            Name = "CanRotinaList",
                            NormalizedName = "CANROTINALIST",
                            Subject = "ac-rotina-page"
                        },
                        new
                        {
                            Id = "1ddbc919-3a6d-49ba-9a93-01739bbecdc1",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "5c5d9634-db59-4688-b88a-82009945d4f6",
                            Description = "Pode atualizar os dados de rotinas",
                            Name = "CanRotinaUpdate",
                            NormalizedName = "CANROTINAUPDATE",
                            Subject = "ac-rotina-page"
                        },
                        new
                        {
                            Id = "f8dcec83-139e-4e21-b3ff-2bc3cb480609",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "9f3068ba-2a7f-4d72-aaa5-2b2f9ccae8ed",
                            Description = "Pode listar os dados de uma rotina",
                            Name = "CanRotinaRead",
                            NormalizedName = "CANROTINAREAD",
                            Subject = "ac-rotina-page"
                        },
                        new
                        {
                            Id = "d7d70372-04a9-4e74-a79f-79f980534455",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "7d088b32-c512-470a-9cf7-bc07d5d3bfa1",
                            Description = "Pode realizar todas as ações/operações relacionadas a entidade rotina event history",
                            Name = "CanRotinaEventHistoryAll",
                            NormalizedName = "CANROTINAEVENTHISTORYALL",
                            Subject = "ac-rotinaEventHistory-page"
                        },
                        new
                        {
                            Id = "d910303c-3585-420e-b4bb-6b72c55b77a0",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "8d1b95a0-575b-4b88-8759-b5999811ac09",
                            Description = "Pode listar todas as rotinas events histories",
                            Name = "CanRotinaEventHistoryList",
                            NormalizedName = "CANROTINAEVENTHISTORYLIST",
                            Subject = "ac-rotinaEventHistory-page"
                        },
                        new
                        {
                            Id = "b8d014ef-edfe-4f08-ba24-ce97cb236f77",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "ec710562-9fd7-4e8d-a057-9f16bb4d3fe4",
                            Description = "Pode listar os dados de uma rotina event history",
                            Name = "CanRotinaEventHistoryRead",
                            NormalizedName = "CANROTINAEVENTHISTORYREAD",
                            Subject = "ac-rotinaEventHistory-page"
                        },
                        new
                        {
                            Id = "76fe43a5-dfa9-40b8-9097-d85f2445697f",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "30cf7bc9-d46d-4f63-90b2-bb3f93d730e5",
                            Description = "Pode realizar todas as ações/operações relacionadas a relatórios de vendedores",
                            Name = "CanVendedorRelatorioComissaoList",
                            NormalizedName = "CANVENDEDORRELATORIOCOMISSAOLIST",
                            Subject = "ac-vendedorRelatorioComissao-page"
                        },
                        new
                        {
                            Id = "7fda4629-1373-41cc-8723-e418d6181b76",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "cd91f112-f853-4a14-a599-4c338a882081",
                            Description = "Pode listar todas as rotinas events histories",
                            Name = "CanVendedorRelatorioAll",
                            NormalizedName = "CANVENDEDORRELATORIOALL",
                            Subject = "ac-vendedorRelatorio-page"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetRoleGroups", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataAniversario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Funcao")
                        .HasColumnType("integer");

                    b.Property<int>("Genero")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TelefoneCelular")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasDefaultValue(99999999999L);

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "ca431822-360a-4ee6-b978-66564d429fc7",
                            DataAniversario = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alan.rezende@boxtecnologia.com.br",
                            EmailConfirmed = true,
                            FullName = "ALAN LEITE DE REZENDE",
                            Funcao = 0,
                            Genero = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAN.REZENDE@BOXTECNOLOGIA.COM.BR",
                            NormalizedUserName = "ALAN.REZENDE@BOXTECNOLOGIA.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGbgHKOKiDDs5fvXN8kHviorntHToMKurnVJNmsFQNInxhQOyZTwJ2w0SpbyCdZbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9514850-61dd-4cc1-b909-88b79b035643",
                            Setor = 0,
                            Status = 0,
                            TelefoneCelular = 0L,
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            TwoFactorEnabled = false,
                            UserName = "alan.rezende@boxtecnologia.com.br"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetUserGroups", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "b3a5b61d-7ff4-43cb-bad4-a945b150fc72"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ChaveApiTerceiro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("ApiTerceiro")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataValidade")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChavesApiTerceiro", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9abfe3a5-cedd-4252-90fc-31c4cb596f72"),
                            ApiTerceiro = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataValidade = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Cep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("20");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("50");

                    b.Property<string>("Cpf")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DataFundacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("5");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("500");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int?>("TipoPessoa")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<long>("BomControleContratoId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Periodicidade")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorContrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,5)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClienteContratos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContratoFatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<long>("BomControleFaturaId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ClienteContratoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataCompetencia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DataPagamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DataVencimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Desconto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,5)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NumeroParcela")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("Quitado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,5)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteContratoId");

                    b.ToTable("ClientesContratosFaturas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ClienteProdutos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<int>("CobrancaTipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<Guid>("ServicoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ServicoId");

                    b.ToTable("ClienteServicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Fornecedores", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<string>("CodigoProduto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorProdutos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("text");

                    b.Property<string>("CodigoServico")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("FornecedorServicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("Pipelines", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineAssinante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.HasIndex("UserId");

                    b.ToTable("PipelineAssinantes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AlertaEstagnacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineEtapas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataConclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineEtapaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineEtapaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaAnexos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Titulo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaApontamentos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamentoAnexo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Anexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaApontamentoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaApontamentoId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaApontamentoAnexos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAssinante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("UserId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaAssinantes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaTag", b =>
                {
                    b.Property<Guid>("TarefaTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PipelineTarefaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("TarefaTagId", "PipelineTarefaId");

                    b.HasIndex("PipelineTarefaId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("TarefaTagId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("PipelineTarefaTags", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("CodigoUnico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<Guid>("FornecedorProdutoId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCusto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodigoUnico")
                        .IsUnique();

                    b.HasIndex("FornecedorProdutoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Rotina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("ChaveSequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"OrderNumbers\"')");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCompetenciaFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCompetenciaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)");

                    b.Property<string>("DispatcherRoute")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Rotinas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a76c3d5-7c06-4757-9952-763952f223be"),
                            ChaveSequencial = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2179), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina insere automaticamente no boxapp os clientes ativos do sistema Bom Controle",
                            DispatcherRoute = "dispatch-clientes-sync",
                            IsDeleted = false,
                            Nome = "Sincronização de clientes com o sistema Bom Controle",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2198), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("1624fef2-1ec5-4541-b492-601e732bd4bc"),
                            ChaveSequencial = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2228), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina insere automaticamente no boxapp os contratos de clientes ainda não existente, a partir do sistema Bom Controle.",
                            DispatcherRoute = "dispatch-contratos-sync",
                            IsDeleted = false,
                            Nome = "Sincronização de contratos de clientes com o sistema Bom Controle",
                            Observacao = "",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2229), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("3a3ed67a-08fd-4ae0-b941-0700b46da892"),
                            ChaveSequencial = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2235), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina atualiza a periodicidade dos novos contratos sincronizados a partir da rotina 2.",
                            DispatcherRoute = "dispatch-contratos-update",
                            IsDeleted = false,
                            Nome = "Atualização de contratos de clientes com o sistema Bom Controle",
                            Observacao = "A atualização de periodicidade que ocorre logo após a importação dos contratos só se faz necessária uma vez que, o método da api do sistema Bom Controle que retorna os contratos não traz este dado. Portanto, se faz necessário buscá-lo em um outro método da api do Bom Controle.",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2236), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("0d532b53-8f82-42f8-bb20-6f9c8043b620"),
                            ChaveSequencial = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2241), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina insere automaticamente no boxapp todas as faturas quitadas de contratos de clientes do bom controle",
                            DispatcherRoute = "dispatch-faturas-quitadas-sync",
                            IsDeleted = false,
                            Nome = "Sincronização de faturas quitadas de contratos de clientes com o sistema Bom Controle",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2243), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("0ce490c7-4f00-42f3-a6e6-b88815480511"),
                            ChaveSequencial = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2247), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina insere automaticamente no boxapp todas as faturas não quitadas de contratos de clientes do bom controle",
                            DispatcherRoute = "dispatch-faturas-nao-quitadas-sync",
                            IsDeleted = false,
                            Nome = "Sincronização de faturas não quitadas de contratos de clientes com o sistema Bom Controle",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2248), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("fbbbcdb4-19ef-436e-93f9-2cd7cef7f203"),
                            ChaveSequencial = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2256), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina atualiza automaticamente no boxapp os dados de faturas a partir de informações do sistema Bom Controle.",
                            DispatcherRoute = "dispatch-faturas-update",
                            IsDeleted = false,
                            Nome = "Atualização dos dados de faturas de contratos de clientes com o sistema Bom Controle",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2258), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("af045f3d-7e2a-45f4-9c59-92db242dca35"),
                            ChaveSequencial = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2262), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina interna gera as comissões de vendedores. As comissões são obtidas a partir dos dados de comissão (Em real ou Porcentagem), parametrizados ao vincular um contrato a um vendedor, bem como são geradas comissões apenas de contratos com faturas pagas (Em dia).",
                            DispatcherRoute = "dispatch-vendedores-comissoes-create",
                            IsDeleted = false,
                            Nome = "Gerar comissão de vendedores ativos no Boxapp",
                            Observacao = "É recomendado que antes de rodar esta rotina, seja rodado a rotina de ChaveSequencial - 2, 3 e 4 -, afim de atualizar os contratos e suas faturas.",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2263), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            Id = new Guid("879f9802-79fe-42be-a05a-afc8af5e683d"),
                            ChaveSequencial = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2268), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DataCompetenciaFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCompetenciaInicio = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Esta rotina interna gera as comissões de um vendedor apenas. As comissões são obtidas a partir dos dados de comissão (Em real ou Porcentagem), parametrizados ao vincular um contrato a um vendedor, bem como são geradas comissões apenas de contratos com faturas pagas (Em dia).",
                            DispatcherRoute = "dispatch-vendedores-comissoes-create-by-vendedorId",
                            IsDeleted = false,
                            Nome = "Gerar comissões para um vendedor ativo no Boxapp",
                            Observacao = "É recomendado que antes de rodar esta rotina, seja rodado a rotina de ChaveSequencial - 2, 3 e 4 -, afim de atualizar os contratos e suas faturas.",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 491, DateTimeKind.Unspecified).AddTicks(2269), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.RotinaEventHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExceptionMensagem")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RotinaId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusProgresso")
                        .HasColumnType("integer");

                    b.Property<long>("TotalItensInsucesso")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalItensSucesso")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RotinaId");

                    b.ToTable("RotinaEventsHistories", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("CodigoUnico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FornecedorServicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCusto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodigoUnico")
                        .IsUnique();

                    b.HasIndex("FornecedorServicoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Servicos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("TarefaTags", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeExibicao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppPrincipal")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            ApiKey = new Guid("57d390e7-2b87-47fe-9bc8-0bae3a388499"),
                            Cnpj = "12.368.943/0001-50",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 476, DateTimeKind.Unspecified).AddTicks(3500), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            EmailPrincipal = "rafale@boxtecnologia.com.br",
                            IsDeleted = false,
                            Nome = "Box Tecnologia Ltda",
                            NomeExibicao = "Box Tecnologia",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 1, 24, 8, 53, 29, 476, DateTimeKind.Unspecified).AddTicks(3528), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Vendedores", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorComissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ClienteContratoFaturaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteContratoId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorComissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClienteContratoFaturaId");

                    b.HasIndex("ClienteContratoId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.HasIndex("VendedorId")
                        .HasFilter("\"IsDeleted\"='0'");

                    b.ToTable("VendedoresComissoes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorContrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ClienteContratoId")
                        .HasColumnType("uuid");

                    b.Property<int>("ComissaoPercentual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<decimal>("ComissaoReais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,3)")
                        .HasDefaultValue(0m);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClienteContratoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("VendedoresContratos", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("BadgeColor")
                        .HasColumnType("text");

                    b.Property<string>("BadgeContent")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExternalLink")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LevelMeKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelUpKey")
                        .HasColumnType("uuid");

                    b.Property<bool>("OpenInNewTab")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("SectionTitle")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("VerticalNavItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VerticalNavItemId");

                    b.ToTable("VerticalNavItems", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationGroups")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany("ApplicationUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Clientes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteContratos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContratoFatura", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ClienteContrato", "ClienteContrato")
                        .WithMany("ClientesContratosFaturas")
                        .HasForeignKey("ClienteContratoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClienteContrato");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteProduto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteProdutos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Produto", "Produto")
                        .WithMany("ClienteProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteServico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("ClienteServicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Servico", "Servico")
                        .WithMany("ClienteServicos")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Fornecedores")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorProdutos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorServicos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Pipelines")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineAssinante", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineAssinantes")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PipelineAssinantes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineEtapas")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineEtapa", "PipelineEtapa")
                        .WithMany("PipelineTarefas")
                        .HasForeignKey("PipelineEtapaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineEtapa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAnexo", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaAnexos")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaApontamentos")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamentoAnexo", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefaApontamento", "PipelineTarefaApontamento")
                        .WithMany("PipelineTarefaApontamentoAnexos")
                        .HasForeignKey("PipelineTarefaApontamentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefaApontamento");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaAssinante", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaAssinantes")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PipelineTarefaAssinantes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("PipelineTarefa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaTag", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.PipelineTarefa", "PipelineTarefa")
                        .WithMany("PipelineTarefaTags")
                        .HasForeignKey("PipelineTarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.TarefaTag", "TarefaTag")
                        .WithMany("PipelineTarefaTags")
                        .HasForeignKey("TarefaTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PipelineTarefa");

                    b.Navigation("TarefaTag");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.FornecedorProduto", "FornecedorProduto")
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FornecedorProduto");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Rotina", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Rotinas")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.RotinaEventHistory", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Rotina", "Rotina")
                        .WithMany("RotinasEventsHistories")
                        .HasForeignKey("RotinaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rotina");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.FornecedorServico", "FornecedorServico")
                        .WithMany("Servicos")
                        .HasForeignKey("FornecedorServicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Servicos")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FornecedorServico");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Vendedor", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Vendedor")
                        .HasForeignKey("BoxBack.Domain.Models.Vendedor", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorComissao", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ClienteContratoFatura", "ClienteContratoFatura")
                        .WithMany()
                        .HasForeignKey("ClienteContratoFaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ClienteContrato", "ClienteContrato")
                        .WithMany("VendedoresComissoes")
                        .HasForeignKey("ClienteContratoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Vendedor", "Vendedor")
                        .WithMany("VendedorComissoes")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClienteContrato");

                    b.Navigation("ClienteContratoFatura");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VendedorContrato", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ClienteContrato", "ClienteContrato")
                        .WithMany("VendedoresContratos")
                        .HasForeignKey("ClienteContratoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Vendedor", "Vendedor")
                        .WithMany("VendedorContratos")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClienteContrato");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.VerticalNavItem", null)
                        .WithMany("Children")
                        .HasForeignKey("VerticalNavItemId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserGroups");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserClaims");

                    b.Navigation("ApplicationUserGroups");

                    b.Navigation("ApplicationUserRoles");

                    b.Navigation("PipelineAssinantes");

                    b.Navigation("PipelineTarefaAssinantes");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Navigation("ClienteContratos");

                    b.Navigation("ClienteProdutos");

                    b.Navigation("ClienteServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ClienteContrato", b =>
                {
                    b.Navigation("ClientesContratosFaturas");

                    b.Navigation("VendedoresComissoes");

                    b.Navigation("VendedoresContratos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Fornecedor", b =>
                {
                    b.Navigation("FornecedorProdutos");

                    b.Navigation("FornecedorServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorProduto", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.FornecedorServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pipeline", b =>
                {
                    b.Navigation("PipelineAssinantes");

                    b.Navigation("PipelineEtapas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineEtapa", b =>
                {
                    b.Navigation("PipelineTarefas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefa", b =>
                {
                    b.Navigation("PipelineTarefaAnexos");

                    b.Navigation("PipelineTarefaApontamentos");

                    b.Navigation("PipelineTarefaAssinantes");

                    b.Navigation("PipelineTarefaTags");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.PipelineTarefaApontamento", b =>
                {
                    b.Navigation("PipelineTarefaApontamentoAnexos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Produto", b =>
                {
                    b.Navigation("ClienteProdutos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Rotina", b =>
                {
                    b.Navigation("RotinasEventsHistories");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Servico", b =>
                {
                    b.Navigation("ClienteServicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.TarefaTag", b =>
                {
                    b.Navigation("PipelineTarefaTags");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Navigation("ApplicationGroups");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Clientes");

                    b.Navigation("Fornecedores");

                    b.Navigation("Pipelines");

                    b.Navigation("Rotinas");

                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Vendedor", b =>
                {
                    b.Navigation("VendedorComissoes");

                    b.Navigation("VendedorContratos");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
